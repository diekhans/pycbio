#!/usr/bin/env python3
# Copyright 2006-2022 Mark Diekhans

import sys
from os import path as osp
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.sys import fileOps, cmdOps
from pycbio.sys.symEnum import SymEnum, SymEnumValue
from pycbio.hgdata.bed import BedReader, Bed, BedBlock

class OutputFmt(SymEnum):
    intron_blk = SymEnumValue(1, 'intron-blk')
    base_bounds = SymEnumValue(2, 'base-bounds')
    exon_bounds = SymEnumValue(3, 'exon-bounds')


def parseArgs():
    desc = """Convert a BED to a set of BEDs for each `intron' between
    BED blocks.  The BED can be a block per intron, a two block BED
    with one base on each side of the intron, or it can include the adjacent
    exons.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--fmt", type=OutputFmt, choices=OutputFmt, default=OutputFmt.intron_blk,
                        help="output format")
    parser.add_argument("--minIntronSize", type=int, default=0,
                        help="minimum size of an intron")
    parser.add_argument("--unique", action='store_true',
                        help="don't output duplicate introns")
    parser.add_argument("--uniqueName", action="store_true",
                        help="make the names unique for a give BED, by added the intron number in the form '-N'")
    parser.add_argument("inBedFile",
                        help="input BED")
    parser.add_argument("outBedFile",
                        help="output BED of introns")
    args = parser.parse_args()
    return args, cmdOps.getOptionalArgs(parser, args)

def makeIntronBed(bed, name, prevBlk, blk):
    return Bed(bed.chrom, prevBlk.end, blk.start, name, strand=bed.strand)

def makeBaseBoundsBed(bed, name, prevBlk, blk):
    return Bed(bed.chrom, prevBlk.end, blk.start, name, strand=bed.strand,
               blocks=(BedBlock(prevBlk.end - 1, prevBlk.end),
                       BedBlock(blk.start, blk.start + 1)))

def makeExonBoundsBed(bed, name, prevBlk, blk):
    return Bed(bed.chrom, prevBlk.end, blk.start, name, strand=bed.strand,
               blocks=(prevBlk, blk))

def makeIntron(bed, opts, iIntron, prevBlk, blk):
    name = bed.name if not opts.uniqueName else bed.name + '_' + str(iIntron)
    if opts.fmt is OutputFmt.intron_blk:
        return makeIntronBed(bed, name, prevBlk, blk)
    if opts.fmt is OutputFmt.base_bounds:
        return makeBaseBoundsBed(bed, name, prevBlk, blk)
    if opts.fmt is OutputFmt.exon_bounds:
        return makeExonBoundsBed(bed, name, prevBlk, blk)
    assert False, f"invalid fmt:{opts.fmt}"

def checkSeenIntrons(bed, prevBlk, blk, seenIntrons):
    key = (prevBlk.end, blk.start, bed.strand)
    if key in seenIntrons:
        return False
    else:
        seenIntrons.add(key)
        return True

def maybeMakeIntron(bed, opts, iIntron, prevBlk, blk, seenIntrons):
    if (seenIntrons is None) or checkSeenIntrons(bed, prevBlk, blk, seenIntrons):
        return makeIntron(bed, opts, iIntron, prevBlk, blk)
    else:
        return None

def processBed(bed, opts, seenIntrons, outFh):
    prevBlk = bed.blocks[0]
    iIntron = 0
    for blk in bed.blocks[1:]:
        if (blk.start - prevBlk.end) >= opts.minIntronSize:
            intronBed = maybeMakeIntron(bed, opts, iIntron, prevBlk, blk, seenIntrons)
            if intronBed is not None:
                intronBed.write(outFh)
            iIntron += 1
        prevBlk = blk

def bedToIntronBed(inBedFile, outBedFile, opts):
    seenIntrons = set() if opts.unique else None
    with fileOps.opengz(outBedFile, 'w') as outFh:
        for bed in BedReader(inBedFile):
            processBed(bed, opts, seenIntrons, outFh)

def main():
    args, opts = parseArgs()
    bedToIntronBed(args.inBedFile, args.outBedFile, opts)


main()
