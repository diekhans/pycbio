#!/usr/bin/env python3
# Copyright 2006-2022 Mark Diekhans

import sys
from os import path as osp
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.sys import fileOps
from pycbio.hgdata.bed import BedReader


def parseArgs():
    desc = """Convert a BED to a set of BED for each gaps intron
    One record is created per intron.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--minIntronSize", type=int, default=0,
                        help="minimum size of an intron")
    parser.add_argument("inBedFile",
                        help="input BED")
    parser.add_argument("outBedFile",
                        help="output BED of introns")
    return parser.parse_args()

def processBed(bed, minIntronSize, outFh):
    prevBlk = bed.blocks[0]
    iIntron = 0
    for blk in bed.blocks[1:]:
        if (blk.start - prevBlk.end) >= minIntronSize:
            fileOps.prRowv(outFh, bed.chrom, prevBlk.end, blk.start, bed.name + '_' + str(iIntron),
                           0, bed.strand)
            iIntron += 1
        prevBlk = blk

def bedToIntronBed(inBedFile, outBedFile, minIntronSize):
    with fileOps.opengz(outBedFile, 'w') as outFh:
        for bed in BedReader(inBedFile):
            processBed(bed, minIntronSize, outFh)

def main(args):
    bedToIntronBed(args.inBedFile, args.outBedFile,
                   args.minIntronSize)


main(parseArgs())
