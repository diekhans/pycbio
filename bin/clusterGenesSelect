#!/usr/bin/env python
# Copyright 2006-2012 Mark Diekhans

import sys
import os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.insert(0, os.path.join(myBinDir, "../lib"))
import argparse
from pycbio.hgdata.clusterGenes import ClusterGenes
from pycbio.sys.fileOps import prRow, prRowv, readFileLines


def parseArgs():
    desc = """%prog [options] clusterFile outFile

    Select clusters based on the criteria specified by the options.
    By default, output a clusterGenes file with just the selected
    records.  If multiple select criteria are specified, they all
    must be true to select the loci.

    Somes options take track sets, which are comma seperated sets
    of track names.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--trackSet",
                        action="append", dest="trackSet", default=None,
                        help="""selects loci that have at least the specified set of tracks. Maybe specified multiple times.""")
    parser.add_argument("--notTrackSet",
                        action="append", dest="notTrackSet", default=None,
                        help="""selects loci that don't have any of the specified set of tracks. Maybe specified multiple times.""")
    parser.add_argument("--onlyTrackSet",
                        action="append", dest="onlyTrackSet", default=None,
                        help="""This selects loci that only the specified set of tracks. Maybe specified multiple times.""")
    parser.add_argument("--notOnlyTrackSet",
                        action="append", dest="notOnlyTrackSet", default=None, help="""This selects loci that don't have only the specified set of tracks. Maybe specified multiple times.""")
    parser.add_argument("--geneIds", action="append", dest="geneIdFiles", default=None,
                        help="""select loci containing these gene ids""")
    parser.add_argument("--trackFilter", action="store", dest="trackFilterSet", default=None,
                        help="""Only output tracks in this set.  Loci that don't contain any of these tracks are dropped""")
    parser.add_argument("--clusterBedOutput", action="store_true", dest="clusterBedOutput", default=False,
                        help="""Output loci bed for select loci""")
    parser.add_argument("clusterFile",
                        help="""clusterGenes output file to process""")
    parser.add_argument("outFile",
                        help="""selected subset of clusters, in clusterGenes format unless BED is requested""")
    return parser.parse_args()


class ClusterSelect(object):
    def __init__(self, opts):
        self.clusters = ClusterGenes(opts.clusterFile)

        self.trackSets = self.__parseTrackSetList(opts.trackSet) if (opts.trackSet is not None) else None
        self.notTrackSets = self.__parseTrackSetList(opts.notTrackSet) if (opts.notTrackSet is not None) else None
        self.onlyTrackSets = self.__parseTrackSetList(opts.onlyTrackSet) if (opts.onlyTrackSet is not None) else None
        self.notOnlyTrackSets = self.__parseTrackSetList(opts.notOnlyTrackSet) if (opts.notOnlyTrackSet is not None) else None
        self.geneIds = self.__loadIdFiles(opts.geneIdFiles) if (opts.geneIdFiles is not None) else None
        self.trackFilterSet = self.__parseTrackSet(opts.trackFilterSet) if (opts.trackFilterSet is not None) else None

    def __parseTrackSet(self, spec):
        selSet = set()
        for tr in spec.split(","):
            selSet.add(intern(tr))
        return selSet

    def __parseTrackSetList(self, specs):
        trackSetList = []
        for spec in specs:
            trackSetList.append(self.__parseTrackSet(spec))
        return trackSetList

    def __loadIdFiles(self, idFiles):
        ids = set()
        for f in idFiles:
            for line in readFileLines(f):
                ids.add(line.strip())
        return ids

    def __selectedByTrackSets(self, cl):
        for ts in self.trackSets:
            if ts & cl.tableSet:
                return True
        return False

    def __rejectedByNotTrackSets(self, cl):
        for ts in self.notTrackSets:
            if ts & cl.tableSet:
                return True
        return False

    def __selectedByOnlyTrackSets(self, cl):
        for ts in self.onlyTrackSets:
            if ts == cl.tableSet:
                return True
        return False

    def __rejectedByNotOnlyTrackSets(self, cl):
        for ts in self.notOnlyTrackSets:
            if ts == cl.tableSet:
                return True
        return False

    def __selectedByGeneId(self, cl):
        for gene in cl:
            if gene.gene in self.geneIds:
                return True
        return False

    def __selected(self, cl):
        if (self.trackSets is not None) and not self.__selectedByTrackSets(cl):
            return False
        if (self.notTrackSets is not None) and self.__rejectedByNotTrackSets(cl):
            return False
        if (self.onlyTrackSets is not None) and not self.__selectedByOnlyTrackSets(cl):
            return False
        if (self.notOnlyTrackSets is not None) and self.__rejectedByNotOnlyTrackSets(cl):
            return False
        if (self.geneIds is not None) and not self.__selectedByGeneId(cl):
            return False
        if (self.trackFilterSet is not None) and not (self.trackFilterSet & cl.tableSet):
            return False
        return True

    def outClusters(self, outFile):
        outFh = open(outFile, "w")
        outFh.write('#')
        prRow(outFh, self.clusters.columns)
        for cl in self.clusters:
            if self.__selected(cl):
                cl.write(outFh, self.trackFilterSet)
        outFh.close()

    def __writeClusterBed(self, outFh, cl):
        prRowv(outFh, cl.chrom, cl.start, cl.end, cl.clusterId, 0, cl.strand)

    def outClusterBed(self, outFile):
        outFh = open(outFile, "w")
        for cl in self.clusters:
            if self.__selected(cl):
                self.__writeClusterBed(outFh, cl)
        outFh.close()

opts = parseArgs()
clSelect = ClusterSelect(opts)
if opts.clusterBedOutput:
    clSelect.outClusterBed(opts.outFile)
else:
    clSelect.outClusters(opts.outFile)
