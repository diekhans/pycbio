#!/usr/bin/env python
# Copyright 2006-2012 Mark Diekhans

from builtins import str
from builtins import object
import sys
import os
import traceback
import re
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.insert(0, os.path.join(myBinDir, "../lib"))
import warnings
from Bio import SeqIO
import argparse
from pycbio.sys import PycbioException
from pycbio.sys import fileOps, setOps
from pycbio.sys.symEnum import SymEnum
from pycbio.sys.fileOps import prLine
from pycbio.tsv import TsvReader, TabFileReader
from pycbio.hgdata.genePred import GenePred, CdsStat
from pycbio.ncbi import gbff

warnCnt = 0

# FIXME: too many special cases in code, simplify.


class GeneType(SymEnum):
    __slots__ = ()
    unknown = 0x01
    protGene = 0x02
    rnaGene = 0x04
    immunoglobulin = 0x08
    other = 0x10


class ActiveType(SymEnum):
    __slots__ = ()
    unknown = 0x01
    live = 0x02
    pseudo = 0x04


def parseArgs():
    desc = """
Parse gene features from genbank flat file records and create a genePred.
Will do pseudogenes or non-pseudogenes.  This is designed to be used on the
NCBI *.gbs.gz files to extract chromosome annotations.  Will read compressed
files.

Retrieve files with:
    wget -nv -r -A 'hs_ref_*.gbs.gz' 'ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/CHR*'

To obtain correct association of CDS to mRNA, use the either the rna.q file
specified with the --rnaq argument and files obtained from locations like:
   ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/mapview/rna.q.gz

or use the --mrnaProtMap option and an mapping obtained by other means.
Otherwise, a crude heuristic is used to associated associated CDS and mRNA
records.

The --mrnaProtMap file can be produce
    wget ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/RNA/rna.gbk.gz
    zcat rna.gbk.gz |awk '/^VERSION/{mrna=$2} /\/protein_id=/{print mrna"\t"gensub("^.*\"(.*)\"","\\1","g",$1)}'  >mrna2prot.tbl

You will also need to lift the contigs to chromosomes.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--rnaq", dest="rnaq", action="store", default=None,
                        help="use this rna.q file to match CDS to mRNA")
    parser.add_argument("--mrnaProtMap", dest="mrnaProtMap", action="store", default=None,
                        help="tab-separated file of /transcript_id mRNA field to corresponding CDS /protein_id field")
    parser.add_argument("--protGenes", dest="protGenes", action="store_true", default=False,
                        help="extract protein coding gene annotations, default if no other get options are specified")
    parser.add_argument("--rnaGenes", dest="rnaGenes", action="store_true", default=False,
                        help="extract non-protein coding gene annotations")
    parser.add_argument("--otherGenes", dest="otherGenes", action="store_true", default=False,
                        help="extract gene annotations where type is undetermined")
    parser.add_argument("--immunoglobulins", dest="immunoglobulins", action="store_true", default=False,
                        help="get immunoglobulins genes")
    parser.add_argument("--allGenes", dest="allGenes", action="store_true", default=False,
                        help="extra all genes, and immunoglobulins, both pseudo and live")
    parser.add_argument("--pseudo", dest="pseudo", action="store_true", default=False,
                        help="extract  pseudogenes, either immunoglobulin or assumed protein coding (since type not annotated)")
    parser.add_argument("--live", dest="live", action="store_true", default=False,
                        help="extract live gene annotations; default if --pseudo is not specified")
    parser.add_argument("--refSeqOnly", dest="refSeqOnly", action="store_true", default=False,
                        help="only convert entries that appear to have RefSeq accessions")
    parser.add_argument("--ext", dest="ext", action="store_true", default=False,
                        help="make extended genePreds")
    parser.add_argument("--dropLocusVer", dest="dropLocusVer", action="store_true", default=False,
                        help="remove the version from the locus (contig or chrom) accession")
    parser.add_argument("--verbose", type=int, default=0,
                        help="set verbosity level")
    parser.add_argument("--errorOnWarn", dest="errorOnWarn", action="store_true", default=False,
                        help="generate an error at the end if warnings are encountered")
    parser.add_argument("--ignoreShortSequence", dest="ignoreShortSequence", action="store_true", default=False,
                        help="ignore complaints about short sequences that are used in test cases")
    parser.add_argument("gbff",
                        help="GENBANK flat file to process")
    parser.add_argument("genePredFile",
                        help="output file in genePred format")
    opts = parser.parse_args()
    if (opts.rnaq is not None) and (opts.mrnaProtMap is not None):
        parser.error("can only specify one of -rnaq or -mrnaProtMap")
    if opts.allGenes:
        opts.protGenes = opts.rnaGenes = opts.other = opts.immunoglobulins = True
    elif not (opts.protGenes or opts.rnaGenes or opts.otherGenes or opts.immunoglobulins):
        opts.protGenes = True
    opts.selected = set()
    if opts.protGenes:
        opts.selected.add(GeneType.protGene)
    if opts.rnaGenes:
        opts.selected.add(GeneType.rnaGene)
    if opts.otherGenes:
        opts.selected.add(GeneType.other)
    if opts.immunoglobulins:
        opts.selected.add(GeneType.immunoglobulin)
    opts.active = set()
    if opts.live:
        opts.active.add(ActiveType.live)
    if opts.pseudo:
        opts.active.add(ActiveType.pseudo)
    if len(opts.active) == 0:
        opts.active.add(ActiveType.live)
    return opts


def prWarn(*objs):
    "print warning, a space is added between each arg"
    global warnCnt
    fh = sys.stderr
    fh.write("Warning:")
    for o in objs:
        fh.write(' ')
        fh.write(str(o))
    fh.write("\n")
    warnCnt += 1


class RnaCdsMap(object):
    "associate table of mRNA id to protein id from rna.q or a tab-separated file"
    def __init__(self, rnaqFile=None, mrnaProtFile=None):
        self.rnaProtMap = dict()
        self.protRnaMap = dict()
        if rnaqFile is not None:
            self.src = rnaqFile
            self._loadRnaq(rnaqFile)
        else:
            self.src = mrnaProtFile
            self._loadMrnaProtFile(mrnaProtFile)

    def _loadRnaq(self, rnaqFile):
        # rna_accession	rna_gi	prot_accession	prot_gi	gene_id	unigene_id	bases	strain	source_db	defline
        for row in TsvReader(rnaqFile):
            self.rnaProtMap[row.rna_accession] = row.prot_accession
            self.protRnaMap[row.prot_accession] = row.rna_accession

    def _loadMrnaProtFile(self, mrnaProtFile):
        for row in TabFileReader(mrnaProtFile):
            self.rnaProtMap[row[0]] = row[1]
            self.protRnaMap[row[1]] = row[0]


class TransFeatures(object):
    "object that holds features"

    def __init__(self, gene, transId):
        self.gene = gene
        self.transId = transId  # maybe None
        self.cdsFt = None
        self.cdsCoords = None
        self.mrnaFt = None     # either mrna or *segment features
        self.mrnaCoords = None
        self.miscRnaFt = None
        self.miscRnaCoords = None
        self.exonFts = None
        self.exonCoords = None

    def __str__(self):
        return self.getTransId()

    def getTransId(self):
        "get transcript id, or gene id if transcript id is None"
        if self.transId is not None:
            return self.transId
        else:
            return self.gene.geneSym

    def getCdsId(self):
        return (gbff.featGetCdsId(self.cdsFt) if self.cdsFt is not None else None)

    def addMRna(self, mrnaFt):
        if self.mrnaFt is not None:
            raise gbff.GbffExcept("transcript already has mRNA: {}".format(self.getTransId()))
        self.mrnaFt = mrnaFt

    def getMRnaCoords(self):
        "get mRNA coordinates, or None"
        if (self.mrnaFt is not None) and (self.mrnaCoords is None):
            self.mrnaCoords = gbff.Coords.fromSeqFeature(self.mrnaFt)
        return self.mrnaCoords

    def addMiscRna(self, rnaFt):
        if self.miscRnaFt is not None:
            raise gbff.GbffExcept("transcript already has misc RNA: {}".format(self.getTransId()))
        self.miscRnaFt = rnaFt

    def getMiscRnaCoords(self):
        "get misc RNA coordinates, or None"
        if (self.miscRnaFt is not None) and (self.miscRnaCoords is None):
            self.miscRnaCoords = gbff.Coords.fromSeqFeature(self.miscRnaFt)
        return self.miscRnaCoords

    def addCds(self, cdsFt):
        if self.cdsFt is not None:
            raise gbff.GbffExcept("transcript already has CDS: {}".format(self.getTransId()))
        self.cdsFt = cdsFt

    def getCdsCoords(self):
        "get coordindates defined by CDS feature, or none"
        if (self.cdsFt is not None) and (self.cdsCoords is None):
            self.cdsCoords = gbff.Coords.fromSeqFeature(self.cdsFt)
        return self.cdsCoords

    def addExon(self, exonFt):
        if self.exonFts is None:
            self.exonFts = []
        self.exonFts.append(exonFt)

    def getExonCoords(self):
        "get exon coordinates, or None"
        if (self.exonFts is not None) and (self.exonCoords is None):
            self.exonCoords = gbff.Coords()
            for ef in self.exonFts:
                self.exonCoords.extend(gbff.Coords.fromSeqFeature(ef))
            self.exonCoords.sort()
        return self.exonCoords

    def getMergedMRnaCdsCoords(self):
        """generate coordinates defined by a merge or the CDS and mRNA
        coords.  This will leave small, internal gaps, which indicate
        ribosomal frame shifts, etc"""
        coords = []
        mrna = self.getMRnaCoords()
        mi = 0
        cds = self.getCdsCoords()
        ci = 0

        # initial UTR-only blocks
        while (mi < len(mrna)) and (mrna[mi].end < cds[0].start):
            coords.append(mrna[mi])  # before CDS
            mi += 1

        # CDS/UTR overlap, first block define this way starts on mRNA exon
        # last block end on mRNA exon boundary, the rest define by CDS blocks.
        # this captures frame shifts
        while (ci < len(cds)) and (mi < len(mrna)):
            while (ci < len(cds)) and (mrna[mi].contains(cds[ci])):
                st = mrna[mi].start if ci == 0 else cds[ci].start
                en = mrna[mi].end if ci == len(cds) - 1 else cds[ci].end
                coords.append(gbff.Coord(st, en, mrna[mi].strand))
                ci += 1
            mi += 1

        # final UTR-only blocks
        while mi < len(mrna):
            coords.append(mrna[mi])  # after CDS
            mi += 1
        return coords

    refSeqAccRe = re.compile("^[NX][MRP]_[0-9]+(\\.[0-9]+)?$")

    def isRefSeq(self):
        return (self.transId is not None) and (self.refSeqAccRe.match(self.transId) is not None)

    def dump(self):
        prLine(sys.stderr, "\ttranscript: ", self.transId, " gene: ", self.gene.geneSym)
        prLine(sys.stderr, "\t   cds: ", self.cdsFt)
        prLine(sys.stderr, "\t  mRNA: ", self.mrnaFt)
        prLine(sys.stderr, "\t   RNA: ", self.miscRnaFt)
        prLine(sys.stderr, "\t exons: ", self.exonFts)


class GeneFeatures(object):
    """object for a gene and associated transcripts. This reduces gene
    and pseudogene annotations into a common data format.
    If features don't have transcripts ids, they are added to a
    default transcript with a transcript id of None.
    Use GeneID: rather than gene symbol to match features to genes, as they
    are sometimes not consistent.
    """

    def __init__(self, rec, geneFt):
        self.rec = rec
        self.geneSym = gbff.featMustGetQual1(geneFt, "gene")
        self.geneId = gbff.featMustGetGeneId(geneFt)
        self.geneFt = geneFt
        self.coords = None
        self.transTbl = dict()
        self.mrnaTrans = []  # ordered list of transcripts from mRNA or *segment features
        self.cdsFts = []   # ordered list of CDS features
        self.miscRnaTrans = []  # list of misc_rna transcripts
        self.geneType = GeneType.unknown
        self.activeType = ActiveType.live
        self._flagIfPseudoFt(geneFt)

    def __str__(self):
        return self.geneSym + " (" + self.geneId + ")"

    def prTransCds(self, fh):
        prLine(fh, "gene: ", self)
        prLine(fh, "    mrnaTrans:")
        for trans in self.mrnaTrans:
            prLine(fh, "        ", trans.transId, " ", trans.getMRnaCoords())
        prLine(fh, "    CDS:")
        for cdsFt in self.cdsFts:
            prLine(fh, "        ", gbff.featGetCdsId(cdsFt), " ", gbff.Coords.fromSeqFeature(cdsFt))

    def finish(self, verbose, rnaCdsMap=None):
        "finish construction"
        # set type. since type for non-immunoglobulins pseudogenes is not
        # explicit in annotation, assume they are protein coding
        if self.geneType == GeneType.unknown:
            if len(self.mrnaTrans) > 0:
                self.geneType = GeneType.protGene
            elif len(self.miscRnaTrans) > 0:
                self.geneType = GeneType.rnaGene
            elif self.activeType == ActiveType.pseudo:
                self.geneType = GeneType.protGene
            else:
                self.geneType = GeneType.other
        # other tasks
        if len(self.cdsFts) > 0:
            self._assocCds(verbose, rnaCdsMap)

    def _assocCds(self, verbose, rnaCdsMap):
        """associate CDS features with mRNA features This maps from CDS to
        mRNA, as there is no way of knowing if a mRNA should have a CDS"""
        for cdsFt in self.cdsFts:
            # FIXME: None checkl is immunoglobulins
            if gbff.featGetCdsId(cdsFt) is not None:
                if rnaCdsMap is not None:
                    self._tblAssocCds(cdsFt, rnaCdsMap)
                else:
                    self._matchAssocCds(cdsFt)

    def _tblAssocCds(self, cdsFt, rnaCdsMap):
        "associated cds with a transcript using the in map"
        transId = rnaCdsMap.protRnaMap.get(gbff.featGetCdsId(cdsFt))
        if transId is None:
            prWarn("can't find entry for CDS", gbff.featGetCdsId(cdsFt), "in", rnaCdsMap.src)
        else:
            trans = self._transById(transId)
            if trans is not None:
                trans.addCds(cdsFt)
            else:
                prWarn("can't find mRNA", transId, "for CDS", gbff.featGetCdsId(cdsFt))

    def _transById(self, tranId):
        for trans in self.mrnaTrans:
            if trans.getTransId() == tranId:
                return trans
        return None

    def _matchAssocCds(self, cdsFt):
        """associate CDS with transcripts via longest matched"""
        trans = self._findLongestCdsMatch(cdsFt)
        if trans is not None:
            trans.addCds(cdsFt)
        else:
            prWarn("can't find matching mRNA for CDS", gbff.featGetCdsId(cdsFt), "gene:", self)

    def _findLongestCdsMatch(self, cdsFt):
        """find longest transcript matching a CDS and not already having a CDS
        defined, or None if no match"""
        bestSize = 0
        bestTrans = None
        for trans in self.mrnaTrans:
            sz = self._checkCdsTransMatch(cdsFt, trans)
            if (sz is not None) and (sz > bestSize):
                bestSize = sz
                bestTrans = trans
        return bestTrans

    def _checkCdsTransMatch(self, cdsFt, trans):
        """return size, or None is no match, or transcript already has a CDS,
        also skip NR/XRs"""
        if trans.getTransId().startswith("NR_") or trans.getTransId().startswith("XR_") or (trans.cdsFt is not None) or not self._cdsMatches(trans, cdsFt):
            return None
        else:
            return gbff.Coords.fromSeqFeature(cdsFt).size()

    @staticmethod
    def _cdsMatches(trans, cdsFt):
        return trans.getMRnaCoords().isContained(gbff.Coords.fromSeqFeature(cdsFt))

    def getCoords(self):
        if self.coords is None:
            self.coords = gbff.Coords.fromSeqFeature(self.geneFt)
        return self.coords

    def getTrans(self, transId):
        "get transcript by id, create new one if needed.  transId maybe none "
        trans = self.transTbl.get(transId)
        if trans is None:
            trans = TransFeatures(self, transId)
            self.transTbl[transId] = trans
        return trans

    def getTransIds(self):
        """get sorted list of transcript ids.  If no transcripts have been
        created, as would happen if there were no features other than gene,
        a default TransFeatures object is created"""
        if len(self.transTbl) == 0:
            self.getTrans(None)  # create default
        transIds = list(self.transTbl.keys())
        transIds.sort()
        return transIds

    def _flagIfPseudoFt(self, feat):
        if gbff.featHaveQual(feat, "pseudo"):
            self.activeType = ActiveType.pseudo

    def _getFtTrans(self, feat, required=True):
        if required:
            return self.getTrans(gbff.featMustGetQual1(feat, "transcript_id"))
        else:
            return self.getTrans(gbff.featGetQual1(feat, "transcript_id"))

    def addMRna(self, mrnaFt):
        trans = self._getFtTrans(mrnaFt)
        trans.addMRna(mrnaFt)
        self._flagIfPseudoFt(mrnaFt)

        # keep ordered list for CDS additions
        self.mrnaTrans.append(trans)

    def _getFtIg(self, feat, required=True):
        if required:
            return gbff.featMustGetQual1ByKeys(feat, ("gene", "standard_name"))
        else:
            return gbff.featGetQual1ByKeys(feat, ("gene", "standard_name"))

    def addIg(self, igFt):
        trans = self.getTrans(self._getFtIg(igFt))
        trans.addMRna(igFt)
        self._flagIfPseudoFt(igFt)

        # keep ordered list for CDS additions
        self.mrnaTrans.append(trans)

    def addCds(self, cdsFt):
        self.cdsFts.append(cdsFt)
        self._flagIfPseudoFt(cdsFt)

    def addExon(self, exonFt):
        # should always get the default transcript
        trans = self._getFtTrans(exonFt, required=False)
        assert(trans.transId is None)
        trans.addExon(exonFt)
        self._flagIfPseudoFt(exonFt)

    def addMiscRna(self, rnaFt):
        trans = self._getFtTrans(rnaFt)
        trans.addMiscRna(rnaFt)
        self._flagIfPseudoFt(rnaFt)
        self.miscRnaTrans.append(trans)

    def flagImmunoglobulin(self):
        self.geneType = GeneType.immunoglobulin

    def isRefSeq(self):
        for trans in self.mrnaTrans:
            if trans.isRefSeq():
                return True
        return False

    def dump(self):
        prLine(sys.stderr, "gene:", self.geneSym)
        for trans in self.transTbl.values():
            trans.dump()


class RecProcessor(object):
    "process a record from the file"

    def __init__(self, rec, opts, rnaCdsMap=None):
        self.rec = rec
        self.opts = opts
        # need to lookup both by id and sym, as sometimes mrna syms don't
        # match gene and exons don't have syms.  Also, sometimes a feature
        # proceeds the gene it references, so do this in two passes.
        self.genes = []
        self.genesById = dict()
        self.genesBySym = dict()
        self._findGenes(rec)
        self._findFeats(rec)
        for gene in self.genes:
            self._finishGene(gene, rnaCdsMap)

    def _finishGene(self, gene, rnaCdsMap):
        gene.finish(self.opts.verbose, rnaCdsMap)

    def _findGenes(self, rec):
        for feat in rec.features:
            if feat.type == "gene":
                self._procGeneFt(feat)

    def _procFeat(self, feat):
        if feat.type == "exon":
            self._procExonFt(feat)
        elif feat.type == "CDS":
            self._procCdsFt(feat)
        elif feat.type == "mRNA":
            self._procMRnaFt(feat)
        elif feat.type == "misc_RNA":
            self._procMiscRnaFt(feat)
        elif feat.type.endswith("_segment") or (feat.type == "C_region"):
            self._procIGFeat(feat)

    def _findFeats(self, rec):
        for feat in rec.features:
            try:
                self._procFeat(feat)
            except gbff.GbffExcept as ex:
                prWarn(ex)
                if self.opts.verbose >= 2:
                    traceback.print_exc(None, sys.stderr)
                    prLine(sys.stderr)

    def _procGeneFt(self, geneFt):
        geneId = gbff.featMustGetGeneId(geneFt)
        if geneId in self.genesById:
            raise gbff.GbffExcept("duplicate gene: {}".format(geneId))
        geneSym = gbff.featMustGetQual1(geneFt, "gene")
        gene = GeneFeatures(self.rec, geneFt)
        self.genes.append(gene)
        self.genesById[geneId] = gene
        self.genesBySym[geneSym] = gene
        if self.opts.verbose >= 3:
            prLine(sys.stderr, "parsing gene: ", str(gene))

    def _getGeneObjById(self, feat, required=True):
        if required:
            geneId = gbff.featMustGetGeneId(feat)
        else:
            geneId = gbff.featGetGeneId(feat)
            if (geneId is None):
                return None
        gene = self.genesById.get(geneId)
        if (gene is None):
            raise gbff.GbffExcept("no gene for {} {}, referenced by {}".format(geneId, feat.type, feat.location))
        return gene

    def _getGeneObjBySym(self, feat, required=True, qualName="gene"):
        if required:
            self.genesBySym[gbff.featMustGetQual1(feat, qualName)]
        else:
            geneSym = gbff.featGetQual1(feat, qualName)
            if (geneSym is not None) and (geneSym in self.genesBySym):
                return self.genesBySym[geneSym]
            else:
                return None

    def _procExonFt(self, exonFt):
        gene = self._getGeneObjBySym(exonFt, required=False)
        if gene is not None:
            gene.addExon(exonFt)

    def _procCdsFt(self, cdsFt):
        gene = self._getGeneObjById(cdsFt)
        gene.addCds(cdsFt)

    def _getRnaGene(self, rnaFt):
        # generally by transcript id, but also try gene
        gene = self._getGeneObjById(rnaFt, required=False)
        if (gene is None):
            gene = self._getGeneObjBySym(rnaFt, qualName="gene", required=False)
        if (gene is None):
            gbff.featRaiseNeedAQual(rnaFt, ("transcript_id", "gene"))
        return gene

    def _procMRnaFt(self, mrnaFt):
        self._getRnaGene(mrnaFt).addMRna(mrnaFt)

    def _procMiscRnaFt(self, rnaFt):
        self._getRnaGene(rnaFt).addMiscRna(rnaFt)

    def _procIGFeat(self, igFt):
        # some V_segment have /standard_name= to reference gene sym
        # instead of /gene=, try both
        gene = self._getGeneObjBySym(igFt, qualName="gene", required=False)
        if gene is None:
            gene = self._getGeneObjBySym(igFt, qualName="standard_name", required=False)
        if gene is None:
            gbff.featRaiseNeedAQual(igFt, ("gene", "standard_name"))
        gene.addIg(igFt)
        gene.flagImmunoglobulin()


class GenePredBuilder(object):
    "object to build a genePred"

    def __init__(self, geneSym, transId, chrom, mkExt):
        self.mkExt = mkExt
        self.gp = GenePred()
        self.gp.name = transId
        self.gp.chrom = chrom
        self.gp.strand = None
        self.gp.txStart = None
        self.gp.txEnd = None
        self.gp.cdsStart = None
        self.gp.cdsEnd = None
        if self.mkExt:
            self.gp.score = 0
            self.gp.name2 = geneSym
            self.gp.cdsStartStat = CdsStat.unknown
            self.gp.cdsEndStat = CdsStat.unknown

    def finish(self):
        if self.gp.cdsStart is None:
            self.gp.cdsStart = self.gp.cdsEnd = self.gp.txEnd
        if self.mkExt:
            self.gp.assignFrames()

    def setCds(self, coord):
        "CDS coords is Coord object"
        assert(len(self.gp.exons) > 0)
        if not ((coord.start < self.gp.txEnd) and (coord.end > self.gp.txStart)):
            prWarn("CDS doesn't overlap transcript:", self.gp.name)
        else:
            self.gp.cdsStart = coord.start
            self.gp.cdsEnd = coord.end

    def _addExon(self, coord, prevStart, prevEnd):
        assert(coord.start < coord.end)
        # adjust tx range to contain exon
        if self.gp.txStart is None:
            self.gp.txStart = coord.start
            self.gp.txEnd = coord.end
            self.gp.strand = coord.strand
        else:
            self.gp.txStart = min(self.gp.txStart, coord.start)
            self.gp.txEnd = max(self.gp.txEnd, coord.end)

        if (prevStart is not None) and (coord.start <= prevEnd):
            # merge adjacent or overlapping exons
            prevEnd = max(prevEnd, coord.end)
        else:
            if prevStart is not None:
                self.gp.addExon(prevStart, prevEnd)
            prevStart = coord.start
            prevEnd = coord.end
        return (prevStart, prevEnd)

    def addExons(self, coords):
        """add exons, given a list of converted coordiante tuples, making adjustments
        to prevent overlapping exons or gaps between tx bounds and exons"""
        prevStart = None
        prevEnd = None
        for coord in coords:
            prevStart, prevEnd = self._addExon(coord, prevStart, prevEnd)
        # last exon
        if prevStart is not None:
            self.gp.addExon(prevStart, prevEnd)


class GeneConverter(object):
    """object for pseudo and real gene conversion. Big differences is how we
    get the exon annotations.  For pseudogenes, they come from exon features,
    for genes they come from the mRNA feature"""

    def __init__(self, gene, mkExt, dropLocusVer):
        self.gene = gene
        self.mkExt = mkExt
        self.dropLocusVer = dropLocusVer
        self.outFh = None

    def _convertTrans(self, trans):
        "convert a transcript to a genePred"

        gpb = GenePredBuilder(self.gene.geneSym, trans.getTransId(), (self.gene.rec.name if self.dropLocusVer else self.gene.rec.id), self.mkExt)

        # get exons from one of the sources
        if trans.mrnaFt is not None:
            if trans.cdsFt is not None:
                gpb.addExons(trans.getMergedMRnaCdsCoords())
            else:
                gpb.addExons(trans.getMRnaCoords())
        elif trans.miscRnaFt is not None:
            gpb.addExons(trans.getMiscRnaCoords())
        elif trans.cdsFt is not None:
            gpb.addExons(trans.getCdsCoords())
        elif trans.exonFts is not None:
            gpb.addExons(trans.getExonCoords())
        elif trans.cdsFt is not None:
            gpb.addExons(trans.getCdsCoords())
        elif trans.gene is not None:
            gpb.addExons(trans.gene.getCoords())
        else:
            raise PycbioException("don't know how to convert: " + str(trans))
        cds = None
        if self.gene.geneType == GeneType.immunoglobulin:
            if len(self.gene.cdsFts) > 0:
                cds = gbff.Coords.fromSeqFeature(self.gene.cdsFts[0])
        else:
            cds = trans.getCdsCoords()
        if cds is not None:
            gpb.setCds(cds.getRange())
        gpb.finish()
        gpb.gp.write(self.outFh)

    def convert(self, outFh):
        "convert to a genePred"
        self.outFh = outFh
        # if no transcript info, there is a default transcript
        for transId in self.gene.getTransIds():
            self._convertTrans(self.gene.transTbl[transId])


class GbffToGenes(object):
    "convert a genbank flat file object to genePreds"
    def __init__(self, opts, rnaCdsMap):
        self.opts = opts
        self.rnaCdsMap = rnaCdsMap

    def _shouldConvert(self, gene):
        return ((gene.geneType in self.opts.selected) and (gene.activeType in self.opts.active)
                and ((not self.opts.refSeqOnly) or gene.isRefSeq()))

    def _trace(self, gene, keep):
        prLine(sys.stderr, ("converting" if keep else "skipping"),
               " gene: ", str(gene), " [", gene.geneType, ", ", gene.activeType, "]")
        for transId in gene.getTransIds():
            trans = gene.transTbl[transId]
            if self.opts.verbose >= 2:
                prLine(sys.stderr, "    trans: ", trans.getTransId(), " ",
                       (trans.getMRnaCoords() if trans.mrnaFt is not None else trans.getMiscRnaCoords()))
                prLine(sys.stderr, "    CDS:   ", trans.getCdsId(), " ", trans.getCdsCoords())
            else:
                prLine(sys.stderr, "    trans: ", trans.getTransId(), " CDS: ", trans.getCdsId())

    def _procGene(self, gene):
        keep = self._shouldConvert(gene)
        if self.opts.verbose >= 1:
            self._trace(gene, keep)
        if keep:
            cnv = GeneConverter(gene, self.opts.ext, self.opts.dropLocusVer)
            cnv.convert(self.outFh)

    def _procRec(self, rec):
        if self.opts.verbose >= 3:
            prLine(sys.stderr, "parsing rec: ", rec.locus)
        recProc = RecProcessor(rec, self.opts, self.rnaCdsMap)
        geneSyms = list(recProc.genesBySym.keys())
        geneSyms.sort()
        for geneSym in geneSyms:
            self._procGene(recProc.genesBySym[geneSym])

    def convert(self, genePredFile):
        gbsFh = fileOps.opengz(self.opts.gbff)
        self.outFh = open(genePredFile, "w")
        for rec in SeqIO.parse(gbsFh, "genbank"):
            self._procRec(rec)
        self.outFh.close()
        gbsFh.close()


opts = parseArgs()
if opts.verbose >= 1:
    prLine(sys.stderr, "selecting: genes: ", setOps.setJoin(opts.selected), "  ", setOps.setJoin(opts.active))

# Bio/GenBank/__init__.py issues UserWarning on problems rather than
# something more specific, mean we must filter for all types
# FIXME: report as bug that it isn't specific and not documented.
if opts.ignoreShortSequence:
    warnings.filterwarnings("ignore", ".*Expected sequence length.* found.*", UserWarning, "Bio.GenBank")

rnaCdsMap = None
if opts.rnaq is not None:
    rnaCdsMap = RnaCdsMap(rnaqFile=opts.rnaq)
elif opts.mrnaProtMap is not None:
    rnaCdsMap = RnaCdsMap(mrnaProtFile=opts.mrnaProtMap)
gbffConvert = GbffToGenes(opts, rnaCdsMap)
gbffConvert.convert(opts.genePredFile)
if opts.errorOnWarn and (warnCnt > 0):
    sys.stderr.write("Error: " + str(warnCnt) + " warning(s) encountered\n")
    sys.exit(1)
