#!/usr/bin/env python
# Copyright 2014-2014 Mark Diekhans

import sys, os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from optparse import OptionParser
from pycbio.hgdata.GenePred import GenePred
from pycbio.tsv.TabFile import TabFile
from pycbio.sys import fileOps, MultiDict

# methods of flattening
methodUniqExons = "uniqExons"

allMethods = frozenset([methodUniqExons])

class CmdOpts(object):
    usage="""%prog [options] method [genePredIn] [genePredOut]

    Flatten exon structure of genePreds in a variety of ways.

    method:
      o uniqExons - build map of uniq exons
    """

    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        parser.add_option("--dropNames", action="store_true", dest="dropNames", default=False,
                          help="""make name empty, which can be overwhelming in browser display""")
        (opts, args) = parser.parse_args()
        if (len(args) < 1) or (len(args) > 2):
            parser.error("wrong number of arguments")
        self.method = args[0]
        self.genePredIn = args[1] if len(args) > 1 else "/dev/stdin"
        self.genePredOut = args[2] if len(args) > 2 else "/dev/stdout"
        self.__dict__.update(opts.__dict__)
        if self.method not in allMethods:
            paser.error("invalid method \"" + self.method + "\", expected on of: " + ",".join(allMethods))

class GeneSet(object):
    def __init__(self, genePredFile):
        allTrans = [t for t in GenePred.GenePredReader(genePredFile)]
        self.byGene = None
        if (len(allTrans) > 0) and (allTrans[0].name2 != None):
            __buildByGeneMap(allTrans)

    def __buildByGeneMap(self, allTrans):
        self.byGene = MultiDict()
        for t in allTrans:
            self.byGene.add(name2, t)


        

class GenePredSelect(object):
    def __init__(self, opts):
        self.geneIds = None
        self.singleExon = opts.singleExon
        self.multiExon = opts.multiExon
        self.singleCdsExon = opts.singleCdsExon
        self.multiCdsExon = opts.multiCdsExon
        if opts.geneIdFiles != None:
            self.geneIds = self._loadIdFiles(opts.geneIdFiles)
            
    def _loadIdFiles(self, idFiles):
        ids = set()
        for f in idFiles:
            for line in fileOps.readFileLines(f):
                ids.add(line.strip())
        return ids

    def _selected(self, gp):
        if (self.geneIds != None) and not gp.name in geneIds:
            return False
        if self.singleExon and (len(gp.exons) != 1):
            return False
        if self.multiExon and (len(gp.exons) <= 1):
            return False
        if self.singleCdsExon and (gp.getNumCdsExons() != 1):
            return False
        if self.multiCdsExon and  (gp.getNumCdsExons() <= 1):
            return False
        return True

    def select(self, genePredIn, genePredOut):
        outFh = file(genePredOut, "w")
        for row in fileOps.iterRows(genePredIn):
            gp = GenePred(row)
            if self._selected(gp):
                fileOps.prRow(outFh, gp.getRow())

opts = CmdOpts()
gs = GenePredSelect(opts)
gs.select(opts.genePredIn, opts.genePredOut)
