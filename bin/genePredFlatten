#!/usr/bin/env python
# Copyright 2014-2014 Mark Diekhans

import sys
import os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.insert(0, os.path.join(myBinDir, "../lib"))
import argparse
from pycbio.hgdata.genePred import GenePred
from pycbio.sys import fileOps, multiDict

# methods of flattening
methodUniqExons = "uniqExons"

allMethods = frozenset([methodUniqExons])


def parseArgs():
    desc = """Flatten exon structure of genePreds in a variety of ways.

    method:
      o uniqExons - build map of uniq exons
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--dropNames", action="store_true", dest="dropNames", default=False,
                        help="""make name empty, which can be overwhelming in browser display""")
    parser.add_argument("method", choices=allMethods,
                        help="method of flattening")
    parser.add_argument("genePredIn", default="/dev/stdin",
                        help="input genePred")
    parser.add_argument("genePredOut", default="/dev/stdout",
                        help="output genePred")
    return parser.parse_args()


class GeneSet(object):
    def __init__(self, genePredFile):
        allTrans = [t for t in GenePred.GenePredReader(genePredFile)]
        self.byGene = None
        if (len(allTrans) > 0) and (allTrans[0].name2 is not None):
            self.__buildByGeneMap(allTrans)

    def __buildByGeneMap(self, allTrans):
        self.byGene = multiDict.MultiDict()
        for t in allTrans:
            self.byGene.add(t.name2, t)


class GenePredSelect(object):
    def __init__(self, opts):
        self.geneIds = None
        self.singleExon = opts.singleExon
        self.multiExon = opts.multiExon
        self.singleCdsExon = opts.singleCdsExon
        self.multiCdsExon = opts.multiCdsExon
        if opts.geneIdFiles is not None:
            self.geneIds = self.__loadIdFiles(opts.geneIdFiles)

    def __loadIdFiles(self, idFiles):
        ids = set()
        for f in idFiles:
            for line in fileOps.readFileLines(f):
                ids.add(line.strip())
        return ids

    def __selected(self, gp):
        if (self.geneIds is not None) and (gp.name not in self.geneIds):
            return False
        if self.singleExon and (len(gp.exons) != 1):
            return False
        if self.multiExon and (len(gp.exons) <= 1):
            return False
        if self.singleCdsExon and (gp.getNumCdsExons() != 1):
            return False
        if self.multiCdsExon and (gp.getNumCdsExons() <= 1):
            return False
        return True

    def select(self, genePredIn, genePredOut):
        outFh = file(genePredOut, "w")
        for row in fileOps.iterRows(genePredIn):
            gp = GenePred(row)
            if self.__selected(gp):
                fileOps.prRow(outFh, gp.getRow())


opts = parseArgs()
gs = GenePredSelect(opts)
gs.select(opts.genePredIn, opts.genePredOut)
