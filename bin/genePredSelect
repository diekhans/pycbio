#!/usr/bin/env python
# Copyright 2006-2012 Mark Diekhans

import sys
import os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.insert(0, os.path.join(myBinDir, "../lib"))
import argparse
from pycbio.hgdata.genePred import GenePred
from pycbio.sys import fileOps


def parseArgs():
    desc = """Select clusters based on the criteria specified by the options.
    By default, output a clusterGenes file with just the selected
    records.  If multiple select criteria are specified, they all
    must be be true to select a gene."""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--singleExon", action="store_true", dest="singleExon", default=False,
                        help="""select genes that have a single exon""")
    parser.add_argument("--multiExon", action="store_true", dest="multiExon", default=False,
                        help="""select genes that have multiple exons""")
    parser.add_argument("--singleCdsExon", action="store_true", dest="singleCdsExon", default=False,
                        help="""select genes that have a single CDS exon""")
    parser.add_argument("--multiCdsExon", action="store_true", dest="multiCdsExon", default=False,
                        help="""select genes that have multiple CDS exons""")
    parser.add_argument("--geneIds", action="append", dest="geneIdFiles", default=None,
                        help="""select genes with these gene ids""")
    parser.add_argument("genePredIn", default="/dev/stdin",
                        help="input genePred")
    parser.add_argument("genePredOut", default="/dev/stdout",
                        help="output genePred")
    return parser.parse_args()


class GenePredSelect(object):
    def __init__(self, opts):
        self.geneIds = None
        self.singleExon = opts.singleExon
        self.multiExon = opts.multiExon
        self.singleCdsExon = opts.singleCdsExon
        self.multiCdsExon = opts.multiCdsExon
        if opts.geneIdFiles is not None:
            self.geneIds = self.__loadIdFiles(opts.geneIdFiles)

    def __loadIdFiles(self, idFiles):
        ids = set()
        for f in idFiles:
            for line in fileOps.readFileLines(f):
                ids.add(line.strip())
        return ids

    def __selected(self, gp):
        if (self.geneIds is not None) and (gp.name not in self.geneIds):
            return False
        if self.singleExon and (len(gp.exons) != 1):
            return False
        if self.multiExon and (len(gp.exons) <= 1):
            return False
        if self.singleCdsExon and (gp.getNumCdsExons() != 1):
            return False
        if self.multiCdsExon and (gp.getNumCdsExons() <= 1):
            return False
        return True

    def select(self, genePredIn, genePredOut):
        outFh = file(genePredOut, "w")
        for row in fileOps.iterRows(genePredIn):
            gp = GenePred(row)
            if self._selected(gp):
                fileOps.prRow(outFh, gp.getRow())


opts = parseArgs()
gs = GenePredSelect(opts)
gs.select(opts.genePredIn, opts.genePredOut)
