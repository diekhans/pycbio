#!/usr/bin/env python

from __future__ import print_function
import sys
import os
import argparse
from shutil import copyfile
sys.path.insert(0, os.path.expanduser("~markd/compbio/code/pycbio"))
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from pycbio.sys import fileOps
import json

def parseArgs():
    desc = """program to poke a JSON file and print out the
    unique key structure.."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('inJson')
    parser.add_argument('outfile')
    opts = parser.parse_args()
    return opts

def loadFromJson(fname):
    with open(fname, "r") as fh:
        return json.load(fh)

def saveToJson(fname, obj):
    with open(fname, "w") as fh:
        json.dump(obj, fh, indent=4, separators=(',', ': '))

def getKeysList(data):
    "build set hierarchical keys starting at an array"
    keys = set()
    key = "[]"
    for data2 in data:
        for key2 in getKeys(data2):
            keys.add((key,) + key2)
    return keys

def getKeysDict(data):
    "build set hierarchical keys starting at an dict"
    keys = set()
    for key in data.iterkeys():
        for key2 in getKeys(data[key]):
            keys.add((key,) + key2)
    return keys

def getKeys(data):
    "get the unique set of hierarchical keys"
    if isinstance(data, dict):
        return getKeysDict(data)
    elif isinstance(data, list):
        return getKeysList(data)
    else:
        return set([(type(data).__name__,)])

def printKeys(outfile, keys):
    with open(outfile, "w") as fh:
        for key in sorted(list(keys)):
            fileOps.prRow(fh, [str(k) for k in key])

def keyToStruct(key, iKey, keyStruct):
    if iKey < len(key)-2:
        if key[iKey] not in keyStruct:
            keyStruct[key[iKey]] = dict()
        keyToStruct(key, iKey+1, keyStruct[key[iKey]])
    else:
        # save final value as string of types
        if key[iKey] not in keyStruct:
            keyStruct[key[iKey]] = key[iKey+1]
        else:
            keyStruct[key[iKey]] += ","+key[iKey+1]

def keysToStruct(keys):
    "recursively convert set of tuple keys to a dict"
    keyStruct = dict()
    for key in keys:
        keyToStruct(key, 0, keyStruct)
    return keyStruct

def jsonAnalyze(opts):
    data = loadFromJson(opts.inJson)
    collect = dict()
    keys = getKeys(data)
    #printKeys(opts.outfile, keys)
    saveToJson(opts.outfile, keysToStruct(keys))

jsonAnalyze(parseArgs())
