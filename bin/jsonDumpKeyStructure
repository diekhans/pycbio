#!/usr/bin/env python3

import sys
from os import path as osp
import argparse
import json

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.sys import fileOps


def parseArgs():
    desc = """program to poke a JSON file and print out the
    unique key structure.."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--printKeyPaths', action="store_true", default=False,
                        help="print each key structure as a list rather than a JSON file")
    parser.add_argument('inJson',
                        help="analyze this JSON file")
    parser.add_argument('outfile',
                        help="write results to this file; format depends on options")
    return parser.parse_args()


def loadFromJson(fname):
    with open(fname, "r") as fh:
        return json.load(fh)


def saveToJson(fname, obj):
    with open(fname, "w") as fh:
        json.dump(obj, fh, indent=4, separators=(',', ': '))


def getKeysList(data):
    "build set hierarchical keys starting at an array"
    keys = set()
    key = "[]"
    for data2 in data:
        for key2 in getKeys(data2):
            keys.add((key,) + key2)
    return keys


def getKeysDict(data):
    "build set hierarchical keys starting at an dict"
    keys = set()
    for key in data.keys():
        for key2 in getKeys(data[key]):
            keys.add((key,) + key2)
    return keys


def getKeys(data):
    "get the unique set of hierarchical keys"
    if isinstance(data, dict):
        return getKeysDict(data)
    elif isinstance(data, list):
        return getKeysList(data)
    else:
        return set([(type(data).__name__,)])


def printKeys(outfile, keys):
    with open(outfile, "w") as fh:
        for key in sorted(list(keys)):
            fileOps.prRow(fh, [str(k) for k in key])


def keyToStruct(key, iKey, keyStruct):
    if iKey < len(key) - 2:
        if key[iKey] not in keyStruct:
            keyStruct[key[iKey]] = dict()
        keyToStruct(key, iKey + 1, keyStruct[key[iKey]])
    else:
        # save final value as string of types
        if key[iKey] not in keyStruct:
            keyStruct[key[iKey]] = key[iKey + 1]
        else:
            keyStruct[key[iKey]] += "," + key[iKey + 1]


def keysToStruct(keys):
    "recursively convert set of tuple keys to a dict"
    keyStruct = dict()
    for key in keys:
        keyToStruct(key, 0, keyStruct)
    return keyStruct


def jsonAnalyze(args):
    data = loadFromJson(args.inJson)
    keys = getKeys(data)
    if args.printKeyPaths:
        printKeys(args.outfile, keys)
    else:
        saveToJson(args.outfile, keysToStruct(keys))


jsonAnalyze(parseArgs())
