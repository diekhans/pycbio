#!/usr/bin/env python3
# Copyright 2006-2015 Mark Diekhans

import sys
from os import path as osp
import argparse

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.ncbi.assembly import AssemblyReport
from pycbio import PycbioException
from pycbio.sys import fileOps
from pycbio.sys.symEnum import SymEnum, auto
from pycbio.hgdata.psl import Psl, PslBlock


class IdType(SymEnum):
    "types of identifiers"
    sequenceName = auto()
    genBankAccn = auto()
    refSeqAccn = auto()
    ucscStyleName = auto()
    gencode = auto()
    sequenceNameGenbankAccn = auto()

class OutputType(SymEnum):
    "type of output file"
    lift = auto()
    psl = auto()
    sizes = auto()
    idmap = auto()

class OutputFilter(SymEnum):
    "what to include in the output"
    mainChroms = auto()
    mainAsm = auto()


def parseArgs():
    usage = """
Convert or extract information from an NCBI assembly report file.
Id types based on columns in file, or special handling for gencode naming.

Files are available from:
    ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.36_GRCh38.p10/GCF_000001405.36_GRCh38.p10_assembly_report.txt

Special id types:
    - sequenceNameGenbankAccn - use sequenceName for primary assembly and genbank
      accession for other sequences.
"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--fromIdType', type=IdType, choices=IdType,
                        help="from sequence id type, also id type for sizes")
    parser.add_argument('--toIdType', type=IdType, choices=IdType,
                        help="map to sequence id type")
    parser.add_argument('--include', type=OutputFilter, choices=OutputFilter,
                        help="only include sequence of this type")
    parser.add_argument('--verbose', action="store_true",
                        help="verbose tracing")
    parser.add_argument('--skipUnmapped', action="store_true",
                        help="skipUnmapped sequences")
    parser.add_argument('outputType', type=OutputType, choices=OutputType,
                        help="type of output to create; one of ")
    parser.add_argument('assemblyReport', type=str,
                        help="NCBI assembly report file")
    parser.add_argument('outFile', type=str,
                        help="output of the specified type")
    args = parser.parse_args()
    if (args.outputType == OutputType.lift) or (args.outputType == OutputType.idmap):
        if (args.fromIdType is None) or (args.toIdType is None):
            parser.error(f"output of {OutputType.lift} or {OutputType.idmap} requires --fromIdType and --toIdType")
    elif args.outputType == OutputType.sizes:
        if args.fromIdType is None:
            parser.error(f"output of {OutputType.sizes} requires --fromIdType")
        if args.toIdType is not None:
            parser.error("--toIdType not valid with output of {OutputType.sizes}")
    return args


class CnvInfo(object):
    """info about conversion"""
    def __init__(self, prSkipped):
        self.prSkipped = prSkipped
        self.skipCnt = 0


def emptyIfNone(val):
    return val if val is not None else ""


def getId(seq, idType):
    "get the from a sequence record, given the type of id desired, or None if not defined"
    if idType == IdType.gencode:
        return seq.gencodeName
    elif idType == IdType.sequenceNameGenbankAccn:
        return seq.sequenceNameGenbankAccn
    else:
        return getattr(seq, str(idType))

def recordSkipFromIdToId(seq, fromIdType, fromId, toIdType, toId, cnvInfo):
    cnvInfo.skipCnt += 1
    if cnvInfo.prSkipped:
        print(f"drop sequenceName: {seq.sequenceName} {fromIdType}: {fromId} {toIdType}: {toId}", file=sys.stderr)

def recordSkipFromId(seq, fromIdType, fromId, cnvInfo):
    cnvInfo.skipCnt += 1
    if cnvInfo.prSkipped:
        print(f"drop sequenceName: {seq.sequenceName} {fromIdType}: {fromId}", file=sys.stderr)


def createLiftRec(seq, fromIdType, toIdType, cnvInfo, outFh):
    fromId = getId(seq, fromIdType)
    toId = getId(seq, toIdType)
    if (fromId is not None) and (toId is not None):
        fileOps.prRowv(outFh, 0, fromId, seq.sequenceLength, toId, seq.sequenceLength)
    else:
        recordSkipFromIdToId(seq, fromIdType, fromId, toIdType, toId, cnvInfo)


def createLift(asmReport, filterFn, fromIdType, toIdType, cnvInfo, outFh):
    "create a lift file for the two id types"
    for seq in asmReport.seqs:
        if filterFn(seq):
            createLiftRec(seq, fromIdType, toIdType, cnvInfo, outFh)

def makePsl(seq, qName, tName):
    psl = Psl.create(qName, seq.sequenceLength, 0, seq.sequenceLength,
                     tName, seq.sequenceLength, 0, seq.sequenceLength, '+')
    psl.addBlock(PslBlock(0, 0, seq.sequenceLength))
    psl.match = seq.sequenceLength
    return psl

def createPslRec(seq, fromIdType, toIdType, cnvInfo, outFh):
    fromId = getId(seq, fromIdType)
    toId = getId(seq, toIdType)
    if (fromId is not None) and (toId is not None):
        makePsl(seq, fromId, toId).write(outFh)
    else:
        recordSkipFromIdToId(seq, fromIdType, fromId, toIdType, toId, cnvInfo)


def createPsl(asmReport, filterFn, fromIdType, toIdType, cnvInfo, outFh):
    "create a PSL file for map between two id types"
    for seq in asmReport.seqs:
        if filterFn(seq):
            createPslRec(seq, fromIdType, toIdType, cnvInfo, outFh)


def createSizeRec(seq, fromIdType, cnvInfo, outFh):
    fromId = getId(seq, fromIdType)
    if fromId is not None:
        fileOps.prRowv(outFh, fromId, seq.sequenceLength)
    else:
        recordSkipFromId(seq, fromIdType, fromId, cnvInfo)


def createSizes(asmReport, filterFn, fromIdType, cnvInfo, outFh):
    "create a size file for the id type"
    for seq in asmReport.seqs:
        if filterFn(seq):
            createSizeRec(seq, fromIdType, cnvInfo, outFh)


def createIdmapRec(seq, fromIdType, toIdType, cnvInfo, outFh):
    fromId = getId(seq, fromIdType)
    if fromId is not None:
        fileOps.prRowv(outFh, getId(seq, fromIdType), getId(seq, toIdType))
    else:
        recordSkipFromId(seq, fromIdType, fromId, cnvInfo)


def createIdmap(asmReport, filterFn, fromIdType, toIdType, cnvInfo, outFh):
    """create a TSV of sequence name mappings, including gencode"""
    fileOps.prRowv(outFh, fromIdType, toIdType)
    for seq in asmReport.seqs:
        if filterFn(seq):
            createIdmapRec(seq, fromIdType, toIdType, cnvInfo, outFh)


class IncludeFilter(object):
    "filter to select records"
    def __init__(self, include):
        if include is None:
            self.keep = None  # don't assume values
        elif include == OutputFilter.mainChroms:
            self.keep = frozenset(["assembled-molecule"])
        elif include == OutputFilter.mainAsm:
            self.keep = frozenset(["assembled-molecule",
                                   "unlocalized-scaffold",
                                   "unplaced-scaffold"])
        else:
            raise PycbioException(f"logic error, invalid include: {include}")

    def __call__(self, seq):
        if self.keep is None:
            return True
        else:
            return seq.sequenceRole in self.keep


def main(args):
    asmReport = AssemblyReport(args.assemblyReport)
    filterFn = IncludeFilter(args.include)
    # if skipping, print only if verbose
    cnvInfo = CnvInfo(args.verbose or not args.skipUnmapped)
    with open(args.outFile, "w") as outFh:
        if args.outputType == OutputType.lift:
            createLift(asmReport, filterFn, args.fromIdType, args.toIdType, cnvInfo, outFh)
        if args.outputType == OutputType.psl:
            createPsl(asmReport, filterFn, args.fromIdType, args.toIdType, cnvInfo, outFh)
        elif args.outputType == OutputType.sizes:
            createSizes(asmReport, filterFn, args.fromIdType, cnvInfo, outFh)
        elif args.outputType == OutputType.idmap:
            createIdmap(asmReport, filterFn, args.fromIdType, args.toIdType, cnvInfo, outFh)
    if cnvInfo.skipCnt > 0:
        print("{}: {} sequences skip due to no mapping".format("Warning" if args.skipUnmapped else "Error",
                                                               cnvInfo.skipCnt), file=sys.stderr)
        if not args.skipUnmapped:
            exit(1)


main(parseArgs())
