#!/usr/bin/env python3
# Copyright 2006-2025 Mark Diekhans

import sys
import os
from os import path as osp
import socket
import argparse
import time
from urllib.error import HTTPError
from Bio import Entrez

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio import PycbioException
from pycbio.sys import fileOps

host = "eutils.ncbi.nlm.nih.gov"

verbose = False

# efetch supported databases, from:
#  https://www.ncbi.nlm.nih.gov/books/NBK25497/table/chapter2.T._entrez_unique_identifiers_ui/
validDbs = ("bioproject", "biosample", "books", "cdd", "gap", "dbvar", "gene", "genome",
            "gds", "geoprofiles", "homologene", "mesh", "toolkit", "nlmcatalog",
            "nuccore", "popset", "probe", "protein", "proteinclusters", "pcassay",
            "pccompound", "pcsubstance", "pubmed", "pmc", "snp", "sra", "structure",
            "taxonomy")

def parseArgs():
    desc = """Retrieve genbank records or sequences from NCBI nucleotide
    (GenBank/RefSeq), give accessions or other ids understood by efetch server."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--idFile", dest="idFiles", action="append",
                        help="file containing ids, can be specified multiple times.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--out", "-o", default='/dev/stdout',
                       help="output to this file instead of stdout")
    group.add_argument("--outDir", "-O", default=None,
                       help="output each entry as files the directory named in the for id.gbff or id.fa")
    parser.add_argument("--fasta", "-f", action="store_true", default=False,
                        help="retrieve sequences in fasta format")
    parser.add_argument("--db", choices=validDbs, default="nuccore",
                        help="retrieve from this NCBI database; not all have been tested or will return fasta")
    parser.add_argument("--verbose", "-v", action="store_true", default=False,
                        help="verbose tracing")
    parser.add_argument("--debug", type=int, default=None,
                        help="set HTTP debug level to this value")
    parser.add_argument("--email", default=None,
                        help="override defaulting of email address")
    parser.add_argument("ids", nargs="*", default=[],
                        help="explicit list of ids to fetch")
    args = parser.parse_args()
    if args.email is None:
        args.email = getEmail()
    global verbose
    verbose = args.verbose
    return args

def loadIdFiles(idFiles):
    ids = []
    for idFile in idFiles:
        ids.extend(fileOps.readNonCommentLines(idFile))
    return ids

def getEmail():
    try:
        return os.getenv("USER") + "@" + socket.gethostbyaddr(socket.gethostname())[0]
    except Exception as ex:
        raise PycbioException("unable to obtain email address, specify on command line") from ex

def efetchRetried(email, db, gbid, fmt):
    "efetch, with sleeping and retry to deal with NCBI rate limit"
    triesLeft = 3
    if verbose:
        print(f"fetching: {gbid}", file=sys.stderr)
    while True:
        try:
            return Entrez.efetch(db=db, id=gbid, rettype=fmt, retmode="text", email=email)
        except HTTPError as err:
            if (429 <= err.code <= 599) and (triesLeft > 0):
                if verbose:
                    print("retry: ", err, file=sys.stderr)
                time.sleep(15)
            else:
                raise
        triesLeft -= 1

def efetch(email, db, fastaFmt, gbid, outFh):
    "fetch a genbank entry or fasta"
    fmt = "fasta" if fastaFmt else "gbwithparts"
    resp = efetchRetried(email, db, gbid, fmt)
    ent = resp.read()
    if len(ent) <= 1:
        raise PycbioException("no entry found for \"{}\"".format(id))
    outFh.write(ent)

def doFetchOutToFile(email, db, fastaFmt, ids, outFile):
    with fileOps.opengz(outFile, "w") as outFh:
        for gbid in sorted(ids):
            efetch(email, db, fastaFmt, gbid, outFh)

def doFetchOneToFile(email, db, fastaFmt, gbid, outDir):
    outFile = osp.join(outDir, gbid + (".fa" if fastaFmt else ".gbff"))
    with fileOps.opengz(outFile, "w") as outFh:
        efetch(email, db, fastaFmt, gbid, outFh)

def doFetchOutToDir(email, db, fastaFmt, ids, outDir):
    for gbid in sorted(ids):
        doFetchOneToFile(email, db, fastaFmt, gbid, outDir)

def ncbiGbFetch(args):
    ids = args.ids
    if args.idFiles is not None:
        ids.extend(loadIdFiles(args.idFiles))
    ids = frozenset(ids)
    if len(ids) == 0:
        raise PycbioException("no ids specified on command line or with --idFile")
    email = args.email if args.email is not None else getEmail()
    if args.outDir is not None:
        doFetchOutToDir(email, args.db, args.fasta, ids, args.outDir)
    else:
        doFetchOutToFile(email, args.db, args.fasta, ids, args.out)


ncbiGbFetch(parseArgs())
