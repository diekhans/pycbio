#!/usr/bin/env python
# Copyright 2006-2012 Mark Diekhans

import sys
import os
import socket
import argparse
from Bio import Entrez

host = "eutils.ncbi.nlm.nih.gov"


def parseArgs():
    desc = """%prog [options] [id1 ...]

Retrieve genbank records or sequences from NCBI nucleotide (GenBank/RefSeq),
give accessions or other ids understood by efetch server.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--idFile", dest="idFiles", action="append", default=[],
                        help="file containing ids, can be specified multiple times.")
    parser.add_argument("--out", "-o", dest="out", action="store", default=None,
                        help="output to this file instead of stdout")
    parser.add_argument("--fasta", "-f", dest="fasta", action="store_true", default=False,
                        help="retrieve sequences in fasta format")
    parser.add_argument("--verbose", "-v", dest="verbose", action="store_true", default=False,
                        help="verbose tracing")
    parser.add_argument("--debug", dest="debug", action="store", type=int, default=None,
                        help="set HTTP debug level to this value")
    parser.add_argument("--email", dest="email", action="store", default=None,
                        help="override defaulting of email address")
    parser.add_argument("ids", nargs="*", default=[],
                        help="explicit list of ids to fetch")
    opts = parser.parse_args()
    loadIdFiles(opts)
    if len(opts.ids) == 0:
        parser.error("no ids specified on command line or with --idFile")
    opts.ids = frozenset(opts.ids)
    if opts.email is None:
        opts.email = getEmail()
    return opts


def loadIdFiles(opts):
    for idFile in opts.idFiles:
        opts.ids.extend(loadIdFile(idFile))


def loadIdFile(idFile):
    fh = open(idFile)
    ids = []
    for line in fh:
        line = line.strip()
        if (len(line) > 0) and (line[0] != '#'):
            ids.add(line)
    fh.close()
    return ids


def getEmail():
    return os.getenv("USER") + "@" + socket.gethostbyaddr(socket.gethostname())[0]


def efetch(opts, gbid, outFh):
    "fetch a genbank entry or fasta"
    if opts.fasta:
        fmt = "fasta"
    else:
        fmt = "gbwithparts"
    resp = Entrez.efetch(db="nucleotide", id=gbid, rettype=fmt, email=opts.email)
    ent = resp.read()
    if len(ent) <= 1:
        raise Exception("no entry found for \"{}\"".format(id))
    outFh.write(ent)


def doFetch(opts, outFh):
    for gbid in opts.ids:
        efetch(opts, gbid, outFh)

opts = parseArgs()
outFh = open(opts.out, "w") if opts.out is not None else sys.stdout
doFetch(opts, outFh)
if outFh != sys.stdout:
    outFh.close()
