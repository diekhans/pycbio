#!/usr/bin/env python3
# Copyright 2006-2012 Mark Diekhans

import sys
from os import path as osp
import argparse
import pstats

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.sys.symEnum import SymEnum

validSortKeys = ('calls', 'cumulative', 'file', 'module', 'pcalls', 'line',
                 'name', 'nfl', 'stdname', 'time')

ReportType = SymEnum("ReportType", ("basic", "callers", "callees"))


def parseArgs():
    desc = """format python profile logs from hotshot."""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--sort", action="append", dest="sortKeys", default=["cumulative"],
                        choices=validSortKeys,
                        help="sort result by specified key, which maybe repeated, one of: "
                        + ", ".join(validSortKeys))
    parser.add_argument("--report", dest="reportType", type=ReportType, default=ReportType.basic,
                        help="specify type of report to produce, one of: "
                        + ", ".join([str(v) for v in ReportType]))
    parser.add_argument("--stripDirs", action="store_true", dest="stripDirs", default=False,
                        help="strip directory names from output")
    parser.add_argument("profLog",
                        help="profile log file input")
    parser.add_argument("profStats",
                        help="statistics output")
    return parser.parse_args()


def generateReport(opts, outFh):
    profStats = pstats.Stats(opts.profLog, stream=outFh)
    if opts.stripDirs:
        profStats.strip_dirs()
    profStats.sort_stats(*opts.sortKeys)
    if opts.reportType == ReportType.basic:
        profStats.print_stats()
    elif opts.reportType == ReportType.callers:
        profStats.print_callers()
    elif opts.reportType == ReportType.callees:
        profStats.print_callees()


opts = parseArgs()
with open(opts.profOut, "w") as outFh:
    generateReport(opts, outFh)
