#!/usr/bin/env python3
# Copyright 2006-2022 Mark Diekhans

import sys
from os import path as osp
import argparse
import pstats

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.sys.symEnum import SymEnum

sortKeys = {
    'calls': 'call count',
    'cumulative': 'cumulative time',
    'cumtime': 'cumulative time',
    'file': 'file name',
    'filename': 'file name',
    'module': 'file name',
    'ncalls': 'call count',
    'pcalls': 'primitive call count',
    'line': 'line number',
    'name': 'function name',
    'nfl': 'name/file/line',
    'stdname': 'standard name',
    'time': 'internal time',
    'tottime': 'internal time',
}

ReportType = SymEnum("ReportType", ("basic", "callers", "callees"))


def parseArgs():
    desc = """format python profile logs from cProfile, etc."""

    sortKeyDesc = "\n".join([f"   {key: <12} {sortKeys[key]}" for key in sortKeys.keys()])

    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--sort", action="append", dest="sortKeys",
                        choices=sortKeys.keys(),
                        help="sort result by specified key, which maybe repeated, one of:\n"
                        + sortKeyDesc)
    parser.add_argument("--report", dest="reportType", type=ReportType, default=ReportType.basic,
                        help="specify type of report to produce, one of: "
                        + ", ".join([str(v) for v in ReportType]))
    parser.add_argument("--stripDirs", action="store_true", dest="stripDirs", default=False,
                        help="strip directory names from output")
    parser.add_argument("profLog",
                        help="profile log file input")
    parser.add_argument("statsOut",
                        help="statistics output")
    opts = parser.parse_args()
    if opts.sortKeys is None:
        # can't do this with defaults, since it is a list.
        opts.sortKeys = ["cumulative"]
    return opts

def generateReport(profLog, statsOut, sortKeys, reportType, stripDirs):
    statsOutFh = open(statsOut, "w")
    profStats = pstats.Stats(profLog, stream=statsOutFh)
    if stripDirs:
        profStats.strip_dirs()
    profStats.sort_stats(*sortKeys)
    if reportType == ReportType.basic:
        profStats.print_stats()
    elif reportType == ReportType.callers:
        profStats.print_callers()
    elif reportType == ReportType.callees:
        profStats.print_callees()
    statsOutFh.close()

def main(opts):
    generateReport(opts.profLog, opts.statsOut, opts.sortKeys, opts.reportType, opts.stripDirs)


main(parseArgs())
