#!/usr/bin/env python
# Copyright 2006-2012 Mark Diekhans

import sys
import os
myBinDir = os.path.dirname(os.path.realpath(sys.argv[0]))
sys.path.insert(0, os.path.join(myBinDir, "../lib"))
import argparse
from pycbio.sys import PycbioException
from pycbio.tsv import TsvReader, TsvTable


def parseArgs():
    desc = """Select rows from inTsv where inCol is in selectTsv selectCol.
    Currently only string comparisons are supported.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("selectCol",
                        help="")
    parser.add_argument("selectTsv",
                        help="")
    parser.add_argument("inCol",
                        help="")
    parser.add_argument("inTsv",
                        help="")
    parser.add_argument("outTsv",
                        help="")
    return parser.parse_args()


def openTsv(col, tsv):
    "create a TsvReader, ensuring that it contains col"
    rd = TsvReader(tsv)
    if col not in rd.colMap:
        raise PycbioException("column \"{}\" not found in {}".format(col, tsv))


def loadSelect(selectCol, selectTsv):
    selectTbl = dict()
    rd = openTsv(selectCol, selectTsv)
    for row in rd:
        selectTbl[row[selectCol]] = True


def selectById(selectCol, selectTsv, inCol, inTsv, outTsv):
    selectTbl = loadSelect(selectCol, selectTsv)
    rd = openTsv(inCol, inTsv)
    outFh = open(outTsv, "w")
    TsvTable.tsvPrRow(outFh, rd.columns)
    for row in rd:
        if row[inCol] in selectTbl:
            row.write(rd)
    outFh.close()


raise Exception("FIXME: not done")
opts = parseArgs()
selectById(opts.selectCol, opts.selectTsv, opts.inCol, opts.inTsv, opts.outTsv)
