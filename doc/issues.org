* switch to pip install mysql-connector-python (has named tuple cursor, uses to kznf TE project)
* venn doesn't document what inclusive really is
* pycbio.stats.venn writeSets and writeCounts are the same
is this even a useful format?
* support psl sqlite stuff to build query bin ranges
* modify lib/pycbio/hgdata/gff3 to use gencode gtf/gff paradigm
* DefaultObjDict pickle doesn't work (see disabled in oobjDictTests.py)
* drop enumeration
* nasty BUG:  calling pipeline in a loop agaisnt an open file truncates it each exec
    ouch, this happens with subprocess.call_check too
    does this happen in pipettor?

* drop RDB support in TSV
* document generators:
  http://codespeak.net/~mwh/pydoctor/ - discussion of others

* rename pycbio.sys, it prevent moving PycbioException up one level, since PycbioException imports
  standard sys. Specifying absolute import still breaks pipeline because pickle of exceptions doesn't
  work.

* reverse asserts so order is expect, got (corresponds to diff outout, see pslMapTests)

* add function to init from __init__ args
  http://code.activestate.com/recipes/286185-automatically-initializing-instance-variables-from/
* switch all function to use coords
* exceptTests has to hack around unit test _AssertRaisesContext not saving traceback
see unittest/case.py: # store exception, without traceback, for later retrieval

* convert lib/pycbio/hgdata/binnerSA.py to peewee
* GenePred, etc should have abstraction around from dbColIdxMap, could be good
switch to dictcursors
* also custom cursors that work off of namedtuples would be great, especially to unify the sqlite/mysql interface stuff.
* tests use obsolete makeSuite
* WARNING: mysql pslMySqlTests tests don't work on python3
* sqlite wrapper classes really are not that useful, they could just be functions instead.
* rename getRow() functions to toRow()
* hglite-split spliting up hglite stuff
** ideas: 
 - hglite* table -> model, not just a reader, not confusing with other tables.
   but models are records in am ORM, 
- get*() to read*() methods
* provide support for implementing commands that have optional stdin/stdout
using /dev/stdout doesn't work, as it reset file to the beginning, rather
that append to current location.  Doing:
  fh = os.fdopen(os.dup(sys.stdout.fileno()), "w")
works better
partial test implemented here:
tests/libtests/pycbio/sys/fileOpsTests.py::DISABLED_testOpengzDevStdout()
bed-analysis-tools has some tools that were quickly hacked to compare mappings and alignments for the cactus paper.  It got rather hacky, but there might be some seeds of good commands here.
