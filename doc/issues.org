#+STARTUP: nologdone
#+TODO: TODO ACTIVE PAUSED | DONE CANCELED

* rangefinder: coords strand is like PSL strand, not BED= strand,
but a lot overlap are strand on the chrom coords.  Make this clean
and add a separate strand to rangefinder, maybe rename coords.strand
to clear up confusion,  Maybe coords.orient?

* add AtomicFileOpen()

* the hgDb autoload long convert doesn't seem to work.
Happends with raw reads of PSL rows without cursorclass
    with hgDb.connect(ucscSpec, cursorclass=None) as conn:
        return [r[1:] for r in mysqlOps.query(conn, sql)]  # drop bin column

* Add functions to locate UCSC data
some is already in kznf
* TsvReader could create named tuples.
what about the name?  Doesn't seem to matter
* id pycbio.db.dbDict really useful?
* for APSW, something like sqlite3.Row as; it is both a tuple and a dict
however, it can't be passed to apsw, as it expects a sqlite3 cursor.
Either suggest as an addition to APSW or port to here
cpython-main/Modules/_sqlite/row.{c,h}

https://docs.python.org/3/howto/clinic.html
Currently Argument Clinic is considered internal-only for CPython.

* blob conversion doesn't work:
see kznf-gene-homology/bin/refseqBuildGeneSet
could it be dictionary cursor?
* do away with sqlite weird interface. 
* changes Psl, ChromInfo to have parse functions instead of methods, as with genePred.
* add common program error handler
* make most classes pickle-friendly
* configInPy.py _evalConfigFile doesn't give file name in errors:
caused by: invalid syntax. Perhaps you forgot a comma? (<string>, line 22)

* configInPy is not very elegant and hard to use
should also handle config hierarchy (cmdline -> config file -> defaults)
* paired coordinates features for genome/transcript is really useful:
PrimerS-JuJu/lib/primersjuju/target_transcripts.py
* __eq__ should return NotImplemented rather than raise?
* could ObjDict be a types.SimpleNamespace ?
* vars doesn't work with ObjDict
* build clustering module based on:
t2t-chm13/gene-annotation/t2t-chm13-gene-analysis/bin/geneBoundsLib.py
kznf-gene-homology/bin/paralogClassify
* psl.tOverlap should consider strand?? how?
* TsvReader should use fspec stuff
* coords
- look at biocantor
- write a conceptual model; strand coordinate vs strand, different?
  see isoseq-xspecies/bin/mappedAlignToAnnot got very confused by putting query strand
  on target coordinates
- add intersect function
- add Region with just start, end
- construction looks at object type and takes fields that make 
  sense, so can make a Region from Coords.
- should there be a type (abs vs strand) see isoseq-xspecies/bin/mappedAlignToAnnot
  negative strand coordinates is not the same as negative strand
  confusion arrived because strand in t-coords not t-strand in psl for blocks,
  tstrand gets revsered for block
- Coords.adjust is a horrible name
- pair coords (Feature, see primers juju)
- method to map frame
* create some common genome mapping functions related to
isoseq-xspecies/bin/mappedAlignToAnnot
* coords rich comparison not working
see disabled tests in
tests/libtests/pycbio/hgdata/coordsTests.py
* logger:
** use more complete logging for non-stderr logs
** need to think it through a bit more; need to better understand how to configure propagation, handles
see ~/compbio/gencode/projs/lrgasp/src/lrgasp-submissions/bin/lrgasp-synapse-download
* add dynamic mixing function to typeOps
https://stackoverflow.com/questions/8544983/dynamically-mixin-a-base-class-to-an-instance-in-python
def add_mixing(obj, cls):
    """Apply mixins to a class instance after creation"""
    base_cls = obj.__class__
    base_cls_name = obj.__class__.__name__
    obj.__class__ = type(base_cls_name, (cls, base_cls), {})
but how does an existing instance get added?

=======
* create clustering library, see:
t2t-chm13-gene-analysis/bin/geneBoundsLib.py
* convert to use:
import mysql.connector  # pip install mysql-connector-python
* rangeFinder:
need items() to get keys and values() for when values don't include range
* way to determine primary assembly in a consistent way.
including ungaped sizes
see ~/compbio/kznf/projs/te-insertions/TEInsertions/bin/getRepGenomeCover
=======
* venn: add ability to output upset plot format
gencode/meetings/2021/2021-03-30-gencode/ucsc/bin/plotGeneSetIntersections
gencode/meetings/2021/2021-03-30-gencode/ucsc/data/hprc/gene-missing-venn.tsv
* venn: easier to collect counts, although maybe existing this would have worked fine:
~/compbio/gencode/projs/nrcseq/response/bin/makeVennSets
* if Bed is created without a score and with a strand, zero score is output and no strand
* switch to pip install mysql-connector-python (has named tuple cursor, uses to kznf TE project)
* venn doesn't document what inclusive really is
* pycbio.stats.venn writeSets and writeCounts are the same
is this even a useful format?
* support psl sqlite stuff to build query bin ranges
* modify lib/pycbio/hgdata/gff3 to use gencode gtf/gff paradigm
* DefaultObjDict jsonpickle doesn't work (see disabled in objDictTests.py)
this is hard because one needs to be pickle default_factory, which can be
a class or function.
seems like you can: https://medium.com/@emlynoregan/serialising-all-the-functions-in-python-cd880a63b591
* objDict.py remove dup code with a mixin?
* drop enumeration
* nasty BUG:  calling pipeline in a loop agaisnt an open file truncates it each exec
    ouch, this happens with subprocess.call_check too
    does this happen in pipettor?
* document generators:
  http://codespeak.net/~mwh/pydoctor/ - discussion of others

* rename pycbio.sys, has caused problems with relative imports

* reverse asserts so order is expect, got (corresponds to diff outout, see pslMapTests)

* add function to init from __init__ args
  http://code.activestate.com/recipes/286185-automatically-initializing-instance-variables-from/
* switch all function to use coords
* exceptTests has to hack around unit test _AssertRaisesContext not saving traceback
see unittest/case.py: # store exception, without traceback, for later retrieval

* convert lib/pycbio/hgdata/binnerSA.py to peewee
* GenePred, etc should have abstraction around from dbColIdxMap, could be good
switch to dictcursors
* also custom cursors that work off of namedtuples would be great, especially to unify the sqlite/mysql interface stuff.
* sqlite wrapper classes really are not that useful, they could just be functions instead.
* rename getRow() functions to toRow()
* hglite-split spliting up hglite stuff
** ideas: 
 - hglite* table -> model, not just a reader, not confusing with other tables.
   but models are records in am ORM, 
- get*() to read*() methods
* provide support for implementing commands that have optional stdin/stdout
using /dev/stdout doesn't work, as it reset file to the beginning, rather
that append to current location.  Doing:
  fh = os.fdopen(os.dup(sys.stdout.fileno()), "w")
works better
partial test implemented here:
tests/libtests/pycbio/sys/fileOpsTests.py::DISABLED_testOpengzDevStdout()
bed-analysis-tools has some tools that were quickly hacked to compare mappings and alignments for the cactus paper.  It got rather hacky, but there might be some seeds of good commands here.
* psl.repr less than idea, but block object makes it hard with back-reference
