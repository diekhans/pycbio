#!/usr/bin/env python
# Copyright 2006-2010 Mark Diekhans

# FIXME: Required biopython with bug #1758 fixed (genbank parser chokes on /transl_except)

import sys, os, traceback, re
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.insert(0, myBinDir + "/../lib")

from Bio.GenBank import Iterator, RecordParser
from optparse import OptionParser
from pycbio.sys import fileOps, setOps, typeOps
from pycbio.sys.Enumeration import Enumeration
from pycbio.sys.fileOps import prLine
from pycbio.tsv import TSVReader, TabFileReader
from pycbio.hgdata.GenePred import GenePred,CdsStat
from pycbio.ncbi.Gbff import *

# FIXME: too many special cases in code, simplify.

GeneType = Enumeration("GeneType",
                       ("unknown", "protGene", "rnaGene", "immunoglobulin", "other"),
                       bitSetValues=True)
ActiveType = Enumeration("ActiveType",
                         ("unknown", "live", "pseudo"),
                         bitSetValues=True)

class CmdOpts(object):
    usage = """%prog [options] gbff genePred

Parse gene features from genbank flat file records and create a genePred.
Will do pseudogenes or non-pseudogenes.  This is designed to be used on the
NCBI *.gbs.gz files to extract chromosome annotations.  Will read compressed
files.

Retrieve files with:
    wget -nv -r -A 'hs_ref_*.gbs.gz' 'ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/CHR*'

To obtain correct association of CDS to mRNA, use the either the rna.q file
specified with the --rnaq argument and files obtained from locations like:
   ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/mapview/rna.q.gz

or use the --mrnaProtMap option and an mapping obtained by other means.
Otherwise, a crude heuristic is used to associated associated CDS and mRNA
records.

The --mrnaProtMap file can be produce 
    wget ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/RNA/rna.gbk.gz
    zcat rna.gbk.gz |awk '/^VERSION/{mrna=$2} /\/protein_id=/{print mrna"\t"gensub("^.*\"(.*)\"","\\1","g",$1)}'  >mrna2prot.tbl

You will also need to lift the contigs to chromosomes.
"""
    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        parser.add_option("--rnaq", dest="rnaq", action="store", default=None,
                          help="use this rna.q file to match CDS to mRNA")
        parser.add_option("--mrnaProtMap", dest="mrnaProtMap", action="store", default=None,
                          help="tab-separated file of /transcript_id mRNA field to corresponding CDS /protein_id field")
        parser.add_option("--protGenes", dest="protGenes", action="store_true",
                          default=False,
                          help="extract protein coding gene annotations, default if no other get options are specified")
        parser.add_option("--rnaGenes", dest="rnaGenes", action="store_true",
                          default=False,
                          help="extract non-protein coding gene annotations")
        parser.add_option("--otherGenes", dest="otherGenes", action="store_true",
                          default=False,
                          help="extract gene annotations where type is undetermined")
        parser.add_option("--immunoglobulins", dest="immunoglobulins", action="store_true",
                          default=False,
                          help="get immunoglobulins genes")
        parser.add_option("--allGenes", dest="allGenes", action="store_true",
                          default=False,
                          help="extra all genes, and immunoglobulins, both pseudo and live")
        parser.add_option("--pseudo", dest="pseudo", action="store_true",
                          default=False,
                          help="extract  pseudogenes, either immunoglobulin or assumed protein coding (since type not annotated)")
        parser.add_option("--live", dest="live", action="store_true", default=False,
                          help="extract live gene annotations; default if --pseudo is not specified")
        parser.add_option("--refSeqOnly", dest="refSeqOnly", action="store_true", default=False,
                          help="only convert entries that appear to have RefSeq accessions")
        parser.add_option("--ext", dest="ext", action="store_true", default=False,
                          help="make extended genePreds")
        parser.add_option("--dropLocusVer", dest="dropLocusVer", action="store_true", default=False,
                          help="remove the version from the locus (contig or chrom) accession")
        parser.add_option("--verbose", dest="verbose", action="store", type="int", default=0,
                          help="set verbosity level")
        parser.add_option("--errorOnWarn", dest="errorOnWarn", action="store_true", default=False,
                          help="generate an error at the end if warnings are encountered")
        parser.add_option("--noPsycho", dest="usePsycho", action="store_false",
                          default=True,
                          help="disable pyscho compiler")
        (opts, args) = parser.parse_args()
        if len(args) != 2:
            parser.error("wrong number of arguments")
        (self.gbff, self.genePredFile) = args
        self.__dict__.update(opts.__dict__)
        if (self.rnaq != None) and (self.mrnaProtMap != None):
            parser.error("can only specify one of -rnaq or -mrnaProtMap")
        if self.allGenes:
            self.protGenes = self.rnaGenes = self.other = self.immunoglobulins = True
        elif not (self.protGenes or self.rnaGenes or self.otherGenes or self.immunoglobulins):
            self.protGenes = True
        if not self.pseudo:
            self.alive = True
        self.selected = set()
        if self.protGenes:
            self.selected.add(GeneType.protGene)
        if self.rnaGenes:
            self.selected.add(GeneType.rnaGene)
        if self.otherGenes:
            self.selected.add(GeneType.other)
        if self.immunoglobulins:
            self.selected.add(GeneType.immunoglobulin)
        self.active = set()
        if self.live:
            self.active.add(ActiveType.live)
        if self.pseudo:
            self.active.add(ActiveType.pseudo)
        if len(self.active) == 0:
            self.active.add(ActiveType.live)
        if self.verbose >= 1:
            prLine(sys.stderr, "selecting: genes: ", setOps.setJoin(self.selected), "  ", setOps.setJoin(self.active))

warnCnt = 0
def prWarn(*objs):
    "print warning, a space is added between each arg"
    global warnCnt
    fh = sys.stderr
    fh.write("Warning:")
    for o in objs:
        fh.write(' ')
        fh.write(str(o))
    fh.write("\n")
    warnCnt += 1

class RnaCdsMap(object):
    "associate table of mRNA id to protein id from rna.q or a tab-separated file"
    def __init__(self,  rnaqFile=None, mrnaProtFile=None):
        self.rnaProtMap = dict()
        self.protRnaMap = dict()
        if rnaqFile != None:
            self.src = rnaqFile
            self.__loadRnaq(rnaqFile)
        else:
            self.src = mrnaProtFile
            self.__loadMrnaProtFile(mrnaProtFile)

    def __loadRnaq(self, rnaqFile):
        #rna_accession	rna_gi	prot_accession	prot_gi	gene_id	unigene_id	bases	strain	source_db	defline
        for row in TSVReader(rnaqFile):
            self.rnaProtMap[row.rna_accession] = row.prot_accession
            self.protRnaMap[row.prot_accession] = row.rna_accession

    def __loadMrnaProtFile(self, mrnaProtFile):
        for row in TabFileReader(mrnaProtFile):
            self.rnaProtMap[row[0]] = row[1]
            self.protRnaMap[row[1]] = row[0]

class TransFeatures(object):
    "object that holds features"

    def __init__(self, gene, transId):
        self.gene = gene
        self.transId = transId  # maybe None
        self.cdsFt = None
        self.cdsCoords = None
        self.mrnaFt = None     # either mrna or *segment features
        self.mrnaCoords = None
        self.miscRnaFt = None
        self.miscRnaCoords = None
        self.exonFts = None
        self.exonCoords = None

    def __str__(self):
        return self.getTransId()

    def getTransId(self):
        "get transcript id, or gene id if transcript id is None"
        if self.transId != None:
            return self.transId
        else:
            return self.gene.geneSym

    def getCdsId(self):
        return (featGetCdsId(self.cdsFt) if self.cdsFt != None else None)

    def addMRna(self, mrnaFt):
        if self.mrnaFt != None:
            raise GbffExcept("transcript already has mRNA: " + self.getTransId())
        self.mrnaFt = mrnaFt

    def getMRnaCoords(self):
        "get mRNA coordinates, or None"
        if (self.mrnaFt != None) and (self.mrnaCoords == None):
            self.mrnaCoords = Coords.fromLocation(self.mrnaFt.location)
        return self.mrnaCoords

    def addMiscRna(self, rnaFt):
        if self.miscRnaFt != None:
            raise GbffExcept("transcript already has misc RNA: " + get.getTransId())
        self.miscRnaFt = rnaFt

    def getMiscRnaCoords(self):
        "get misc RNA coordinates, or None"
        if (self.miscRnaFt != None) and (self.miscRnaCoords == None):
            self.miscRnaCoords = Coords.fromLocation(self.miscRnaFt.location)
        return self.miscRnaCoords

    def addCds(self, cdsFt):
        if self.cdsFt != None:
            raise GbffExcept("transcript already has CDS: " + self.getTransId())
        self.cdsFt = cdsFt

    def getCdsCoords(self):
        "get coordindates defined by CDS feature, or none"
        if (self.cdsFt != None) and (self.cdsCoords == None):
            self.cdsCoords = Coords.fromLocation(self.cdsFt.location)
        return self.cdsCoords

    def addExon(self, exonFt):
        if self.exonFts == None:
            self.exonFts =[]
        self.exonFts.append(exonFt)

    def getExonCoords(self):
        "get exon coordinates, or None"
        if (self.exonFts != None) and (self.exonCoords == None):
            self.exonCoords = Coords()
            for ef in self.exonFts:
                self.exonCoords.extend(Coords.fromLocation(ef.location))
            self.exonCoords.sort()
        return self.exonCoords

    def getMergedMRnaCdsCoords(self):
        """generate coordinates defined by a merge or the CDS and mRNA
        coords.  This will leave small, internal gaps, which indicate
        ribosomal frame shifts, etc"""
        coords = []
        mrna = self.getMRnaCoords()
        mi = 0
        cds = self.getCdsCoords()
        ci = 0

        # initial UTR-only blocks
        while (mi < len(mrna)) and (mrna[mi].end < cds[0].start):
            coords.append(mrna[mi])  # before CDS
            mi += 1

        # CDS/UTR overlap, first block define this way starts on mRNA exon
        # last block end on mRNA exon boundary, the rest define by CDS blocks.
        # this captures frame shifts
        while (ci < len(cds)) and (mi < len(mrna)):
            while (ci < len(cds)) and (mrna[mi].contains(cds[ci])):
                st = mrna[mi].start if ci == 0 else cds[ci].start
                en = mrna[mi].end if ci == len(cds)-1 else cds[ci].end
                coords.append(Coord(st, en, mrna[mi].strand))
                ci += 1
            mi += 1

        # final UTR-only blocks
        while mi < len(mrna):
            coords.append(mrna[mi])  # after CDS
            mi += 1
        return coords

    refSeqAccRe = re.compile("^[NX][MRP]_[0-9]+(\\.[0-9]+)?$")
    def isRefSeq(self):
        return (self.transId != None) and (self.refSeqAccRe.match(self.transId) != None)

    def dump(self):
        prLine(sys.stderr, "\ttranscript: ", self.transId, " gene: ", self.gene.geneSym)
        prLine(sys.stderr, "\t   cds: ", self.cdsFt)
        prLine(sys.stderr, "\t  mRNA: ", self.mrnaFt)
        prLine(sys.stderr, "\t   RNA: ", self.miscRnaFt)
        prLine(sys.stderr, "\t exons: ", self.exonFts)

class GeneFeatures(object):
    """object for a gene and associated transcripts. This reduces gene
    and pseudogene annotations into a common data format.
    If features don't have transcripts ids, they are added to a
    default transcript with a transcript id of None.
    Use GeneID: rather than gene symbol to match features to genes, as they
    are sometimes not consistent.
    """

    def __init__(self, rec, geneFt):
        self.rec = rec
        self.geneSym = featMustGetQual(geneFt, "/gene=")
        self.geneId = featMustGetGeneId(geneFt)
        self.geneFt = geneFt
        self.coords = None
        self.transTbl = dict()
        self.mrnaTrans = []  # ordered list of transcripts from mRNA or *segment features
        self.cdsFts = []   # ordered list of CDS features
        self.miscRnaTrans = [] # list of misc_rna transcripts
        self.geneType = GeneType.unknown
        self.activeType = ActiveType.live
        self.__flagIfPseudoFt(geneFt)
        
    def __str__(self):
        return self.geneSym + " (" + self.geneId + ")"

    def prTransCds(self, fh):
        prLine(fh, "gene: ", self)
        prLine(fh, "    mrnaTrans:")
        for trans in self.mrnaTrans:
            prLine(fh, "        ",trans.transId, " ", trans.getMRnaCoords())
        prLine(fh, "    CDS:")
        for cdsFt in self.cdsFts:
            prLine(fh, "        ", featGetCdsId(cdsFt), " ", Coords.fromLocation(cdsFt.location))

    def finish(self, verbose, rnaCdsMap=None):
        "finish construction"
        # set type. since type for non-immunoglobulins pseudogenes is not
        # explicit in annotation, assume they are protein coding
        if self.geneType == GeneType.unknown:
            if len(self.mrnaTrans) > 0:
                 self.geneType = GeneType.protGene
            elif len(self.miscRnaTrans) > 0:
                self.geneType = GeneType.rnaGene
            elif self.activeType == ActiveType.pseudo:
                 self.geneType = GeneType.protGene
            else:
                self.geneType = GeneType.other
        # other tasks
        if len(self.cdsFts) > 0:
            self.__assocCds(verbose, rnaCdsMap)

    def __assocCds(self, verbose, rnaCdsMap):
        """associate CDS features with mRNA features This maps from CDS to
        mRNA, as there is no way of knowing if a mRNA should have a CDS"""
        for cdsFt in self.cdsFts:
            # FIXME: None checkl is immunoglobulins
            if featGetCdsId(cdsFt) != None:
                if rnaCdsMap != None:
                    self.__tblAssocCds(cdsFt, rnaCdsMap)
                else:
                    self.__matchAssocCds(cdsFt)

    def __tblAssocCds(self, cdsFt, rnaCdsMap):
        "associated cds with a transcript using the in map"
        transId = rnaCdsMap.protRnaMap.get(featGetCdsId(cdsFt))
        if transId == None:
            prWarn("can't find entry for CDS", featGetCdsId(cdsFt), "in", rnaCdsMap.src)
        else:
            trans = self.__transById(transId)
            if trans != None:
                trans.addCds(cdsFt)
            else:
                prWarn("can't find mRNA", transId, "for CDS", featGetCdsId(cdsFt))

    def __transById(self, tranId):
        for trans in self.mrnaTrans:
            if  trans.getTransId() == tranId:
                return trans
        return None

    def __matchAssocCds(self, cdsFt):
        """associate CDS with transcripts via longest matched"""
        trans = self.__findLongestCdsMatch(cdsFt)
        if trans != None:
            trans.addCds(cdsFt)
        else:
            prWarn("can't find matching mRNA for CDS", featGetCdsId(cdsFt), "gene:", self)

    def __findLongestCdsMatch(self, cdsFt):
        """find longest transcript matching a CDS and not already having a CDS
        defined, or None if no match"""
        bestSize = 0
        bestTrans = None
        for trans in self.mrnaTrans:
            sz = self.__checkCdsTransMatch(cdsFt, trans)
            if (sz != None) and (sz > bestSize):
                bestSize = sz
                bestTrans = trans
        return bestTrans

    def __checkCdsTransMatch(self, cdsFt, trans):
        """return size, or None is no match, or transcript already has a CDS,
        also skip NR/XRs"""
        if trans.getTransId().startswith("NR_") or trans.getTransId().startswith("XR_") or (trans.cdsFt != None) or not GeneFeatures.__cdsMatches(trans, cdsFt):
            return None
        else:
            return Coords.fromLocation(cdsFt.location).size()

    @staticmethod
    def __cdsMatches(trans, cdsFt):
        return trans.getMRnaCoords().isContained(Coords.fromLocation(cdsFt.location))
    
    def getCoords(self):
        if self.coords == None:
            self.coords = Coords.fromLocation(self.geneFt.location)
        return self.coords

    def getTrans(self, transId):
        "get transcript by id, create new one if needed.  transId maybe none "
        trans = self.transTbl.get(transId)
        if trans == None:
            trans = TransFeatures(self, transId)
            self.transTbl[transId] = trans
        return trans

    def getTransIds(self):
        """get sorted list of transcript ids.  If no transcripts have been
        created, as would happen if there were no features other than gene,
        a default TransFeatures object is created"""
        if len(self.transTbl) == 0:
            self.getTrans(None)  # create default
        transIds = self.transTbl.keys()
        transIds.sort()
        return transIds

    def __flagIfPseudoFt(self, feat):
        if featHaveQual(feat, "/pseudo"):
            self.activeType = ActiveType.pseudo

    def __getFtTrans(self, feat, required=True):
        if required:
            return self.getTrans(featMustGetQual(feat, "/transcript_id="))
        else:
            return self.getTrans(featGetQual(feat, "/transcript_id="))

    def addMRna(self, mrnaFt):
        trans = self.__getFtTrans(mrnaFt)
        trans.addMRna(mrnaFt)
        self.__flagIfPseudoFt(mrnaFt)

        # keep ordered list for CDS additions
        self.mrnaTrans.append(trans)

    def __getFtIg(self, feat, required=True):
        if required:
            return featMustGetQualByKeys(feat, ("/gene=", "/standard_name="))
        else:
            return featGetQualByKeys(feat, ("/gene=", "/standard_name="))

    def addIg(self, igFt):
        trans = self.getTrans(self.__getFtIg(igFt))
        trans.addMRna(igFt)
        self.__flagIfPseudoFt(igFt)

        # keep ordered list for CDS additions
        self.mrnaTrans.append(trans)

    def addCds(self, cdsFt):
        self.cdsFts.append(cdsFt)
        self.__flagIfPseudoFt(cdsFt)
        
    def addExon(self, exonFt):
        # should always get the default transcript
        trans = self.__getFtTrans(exonFt, required=False)
        assert(trans.transId == None)
        trans.addExon(exonFt)
        self.__flagIfPseudoFt(exonFt)

    def addMiscRna(self, rnaFt):
        trans = self.__getFtTrans(rnaFt)
        trans.addMiscRna(rnaFt)
        self.__flagIfPseudoFt(rnaFt)
        self.miscRnaTrans.append(trans)

    def flagImmunoglobulin(self):
        self.geneType = GeneType.immunoglobulin

    def isRefSeq(self):
        for trans in self.mrnaTrans:
            if trans.isRefSeq():
                return True
        return False

    def dump(self):
        prLine(sys.stderr, "gene:", self.geneSym)
        for trans in self.transTbl.itervalues():
            trans.dump()
            
class RecProcessor(object):
    "process a record from the file"

    def __init__(self, rec, opts, rnaCdsMap=None):
        self.rec = rec
        self.opts = opts
        # need to lookup both by id and sym, as sometimes mrna syms don't
        # match gene and exons don't have syms.  Also, sometimes a feature
        # proceeds the gene it references, so do this in two passes.
        self.genes = []
        self.genesById = dict()
        self.genesBySym = dict()
        self.__findGenes(rec)
        self.__findFeats(rec)
        for gene in self.genes:
            self.__finishGene(gene, rnaCdsMap)

    def __finishGene(self, gene, rnaCdsMap):
        gene.finish(self.opts.verbose, rnaCdsMap)

    def __findGenes(self, rec):
        for feat in rec.features:
            if feat.key == "gene":
                self.__procGeneFt(feat)

    def __procFeat(self, feat):
        if feat.key == "exon":
            self.__procExonFt(feat)
        elif feat.key == "CDS":
            self.__procCdsFt(feat)
        elif feat.key == "mRNA":
            self.__procMRnaFt(feat)
        elif feat.key == "misc_RNA":
            self.__procMiscRnaFt(feat)
        elif feat.key.endswith("_segment") or (feat.key == "C_region"):
            self.__procIGFeat(feat)

    def __findFeats(self, rec):
        for feat in rec.features:
            try:
                self.__procFeat(feat)
            except GbffExcept, ex:
                prWarn(ex)
                if self.opts.verbose >= 2:
                    traceback.print_exc(None, sys.stderr)
                    prLine(sys.stderr)

    def __procGeneFt(self, geneFt):
        geneId = featMustGetGeneId(geneFt)
        if geneId in self.genesById:
            raise GbffExcept("duplicate gene: " + geneId)
        geneSym = featMustGetQual(geneFt, "/gene=")
        gene = GeneFeatures(self.rec, geneFt)
        self.genes.append(gene)
        self.genesById[geneId] = gene
        self.genesBySym[geneSym] = gene
        if self.opts.verbose >= 3:
            prLine(sys.stderr, "parsing gene: ", str(gene))

    def __getGeneObjById(self, feat, required=True):
        if required:
            geneId = featMustGetGeneId(feat)
        else:
            geneId = featGetGeneId(feat)
            if (geneId == None):
                return None
        gene = self.genesById.get(geneId)
        if (gene == None):
            raise GbffExcept("no gene for " + geneId + ", referenced by " + feat.key + " " + feat.location)
        return gene
            
    def __getGeneObjBySym(self, feat, required=True, qualName="/gene="):
        if required:
            self.genesBySym[featMustGetQual(feat, qualName)]
        else:
            geneSym = featGetQual(feat, qualName)
            if (geneSym != None) and (geneSym in self.genesBySym):
                return self.genesBySym[geneSym]
            else:
                return None

    def __procExonFt(self, exonFt):
        gene = self.__getGeneObjBySym(exonFt, required=False)
        if gene != None:
            gene.addExon(exonFt)

    def __procCdsFt(self, cdsFt):
        gene = self.__getGeneObjById(cdsFt)
        gene.addCds(cdsFt)

    def __getRnaGene(self, rnaFt):
        # generally by transcript id, but also try gene
        gene = self.__getGeneObjById(rnaFt, required=False)
        if (gene == None):
            gene = self.__getGeneObjBySym(rnaFt, qualName="/gene=", required=False)
        if (gene == None):
            featRaiseNeedAQual(rnaFt, ("/transcript_id=", "/gene="))
        return gene

    def __procMRnaFt(self, mrnaFt):
        self.__getRnaGene(mrnaFt).addMRna(mrnaFt)

    def __procMiscRnaFt(self, rnaFt):
        self.__getRnaGene(rnaFt).addMiscRna(rnaFt)

    def __procIGFeat(self, igFt):
        # some V_segment have /standard_name= to reference gene sym
        # instead of /gene=, try both
        gene = self.__getGeneObjBySym(igFt, qualName="/gene=", required=False)
        if gene == None:
            gene = self.__getGeneObjBySym(igFt, qualName="/standard_name=", required=False)
        if gene == None:
            featRaiseNeedAQual(igFt, ("/gene=", "/standard_name="))
        gene.addIg(igFt)
        gene.flagImmunoglobulin()

class GenePredBuilder(object):
    "object to build a genePred"
    
    def __init__(self, geneSym, transId, chrom, mkExt):
        self.mkExt = mkExt
        self.gp = GenePred()
        self.gp.name = transId
        self.gp.chrom = chrom
        self.gp.strand = None
        self.gp.txStart = None
        self.gp.txEnd = None
        self.gp.cdsStart = None
        self.gp.cdsEnd = None
        if self.mkExt:
            self.gp.score = 0
            self.gp.name2 = geneSym
            self.gp.cdsStartStat = CdsStat.unknown
            self.gp.cdsEndStat = CdsStat.unknown

    def finish(self):
        if self.gp.cdsStart == None:
            self.gp.cdsStart = self.gp.cdsEnd = self.gp.txEnd
        if self.mkExt:
            self.gp.assignFrames()

    def setCds(self, coord):
        "CDS coords is Coord object"
        assert(len(self.gp.exons) > 0)
        if not ((coord.start < self.gp.txEnd) and (coord.end >self.gp.txStart)):
            prWarn("CDS doesn't overlap transcript:", self.gp.name)
        else:
            self.gp.cdsStart = coord.start
            self.gp.cdsEnd = coord.end
            
    def __addExon(self, coord, prevStart, prevEnd):
        assert(coord.start < coord.end)
        # adjust tx range to contain exon
        if self.gp.txStart == None:
            self.gp.txStart = coord.start
            self.gp.txEnd = coord.end
            self.gp.strand = coord.strand
        else:
            self.gp.txStart = min(self.gp.txStart, coord.start)
            self.gp.txEnd = max(self.gp.txEnd, coord.end)
            
        if (prevStart != None) and (coord.start <= prevEnd):
            # merge adjacent or overlapping exons
            prevEnd = max(prevEnd, coord.end)
        else:
            if prevStart != None:
                self.gp.addExon(prevStart, prevEnd)
            prevStart = coord.start
            prevEnd = coord.end
        return (prevStart, prevEnd)

    def addExons(self, coords):
        """add exons, given a list of converted coordiante tuples, making adjustments
        to prevent overlapping exons or gaps between tx bounds and exons"""
        prevStart = None
        prevEnd = None
        for coord in coords:
            prevStart, prevEnd = self.__addExon(coord, prevStart, prevEnd)
        # last exon
        if prevStart != None:
            self.gp.addExon(prevStart, prevEnd)

class GeneConverter(object):
    """object for pseudo and real gene conversion. Big differences is how we
    get the exon annotations.  For pseudogenes, they come from exon features,
    for genes they come from the mRNA feature"""

    def __init__(self, gene, mkExt, dropLocusVer):
        self.gene = gene
        self.mkExt = mkExt
        self.dropLocusVer = dropLocusVer
        self.outFh = None

    def __convertTrans(self, trans):
        "convert a transcript to a genePred"

        gpb = GenePredBuilder(self.gene.geneSym, trans.getTransId(), (self.gene.rec.locus if self.dropLocusVer else self.gene.rec.version), self.mkExt)

        # get exons from one of the sources
        if trans.mrnaFt != None:
            if trans.cdsFt != None:
                gpb.addExons(trans.getMergedMRnaCdsCoords())
            else:
                gpb.addExons(trans.getMRnaCoords())
        elif trans.miscRnaFt != None:
            gpb.addExons(trans.getMiscRnaCoords())
        elif trans.cdsFt != None:
            gpb.addExons(trans.getCdsCoords())
        elif trans.exonFts != None:
            gpb.addExons(trans.getExonCoords())
        elif trans.cdsFt != None:
            gpb.addExons(trans.getCdsCoords())
        elif trans.gene != None:
            gpb.addExons(trans.gene.getCoords())
        else:
            raise Exception("don't know how to convert: " + str(trans))
        cds = None
        if self.gene.geneType == GeneType.immunoglobulin:
            if len(self.gene.cdsFts) > 0:
                cds = Coords.fromLocation(self.gene.cdsFts[0].location)
        else:
            cds = trans.getCdsCoords()
        if cds != None:
            gpb.setCds(cds.getRange())
        gpb.finish()
        gpb.gp.write(self.outFh)
        
    def convert(self, outFh):
        "convert to a genePred"
        self.outFh = outFh
        # if no transcript info, there is a default transcript
        for transId in self.gene.getTransIds():
            self.__convertTrans(self.gene.transTbl[transId])

class GbffToGenes(object):
    "convert a genbank flat file object to genePreds"
    def __init__(self, opts, rnaCdsMap):
        self.opts = opts
        self.rnaCdsMap = rnaCdsMap

    def __shouldConvert(self, gene):
        return ((gene.geneType in self.opts.selected) and (gene.activeType in self.opts.active)
                and ((not self.opts.refSeqOnly) or gene.isRefSeq()))

    def __trace(self, gene, keep):
        prLine(sys.stderr, ("converting" if keep else "skipping"),
               " gene: ", str(gene), " [", gene.geneType, ", ", gene.activeType, "]")
        for transId in gene.getTransIds():
            trans = gene.transTbl[transId]
            if self.opts.verbose >= 2:
                prLine(sys.stderr, "    trans: ", trans.getTransId(), " ", 
                       (trans.getMRnaCoords() if trans.mrnaFt != None else trans.getMiscRnaCoords()))
                prLine(sys.stderr, "    CDS:   ", trans.getCdsId(), " ", trans.getCdsCoords())
            else:
                prLine(sys.stderr, "    trans: ", trans.getTransId(), " CDS: ", trans.getCdsId())
        
    def __procGene(self, gene):
        keep = self.__shouldConvert(gene)
        if self.opts.verbose >= 1:
            self.__trace(gene, keep)
        if keep:
            cnv = GeneConverter(gene, self.opts.ext, self.opts.dropLocusVer)
            cnv.convert(self.outFh)

    def __procRec(self, rec):
        if self.opts.verbose >= 3:
            prLine(sys.stderr, "parsing rec: ", rec.locus)
        recProc = RecProcessor(rec, self.opts, self.rnaCdsMap)
        geneSyms = recProc.genesBySym.keys()
        geneSyms.sort()
        for geneSym in geneSyms:
            self.__procGene(recProc.genesBySym[geneSym])

    def convert(self, genePredFile):
        gbsFh = fileOps.opengz(self.opts.gbff)
        self.outFh = file(genePredFile, "w")
        for rec in Iterator(gbsFh, RecordParser()):
            self.__procRec(rec)
        self.outFh.close()
        gbsFh.close()

opts = CmdOpts()
if opts.usePsycho:
    try:
        import psyco
        psyco.full()
    except ImportError,e:
        pass

rnaCdsMap = None
if opts.rnaq != None:
    rnaCdsMap = RnaCdsMap(rnaqFile=opts.rnaq)
elif opts.mrnaProtMap != None:
    rnaCdsMap = RnaCdsMap(mrnaProtFile=opts.mrnaProtMap)
gbffConvert = GbffToGenes(opts, rnaCdsMap)
gbffConvert.convert(opts.genePredFile)
if opts.errorOnWarn and (warnCnt > 0):
    sys.stderr.write("Error: " + str(warnCnt) + " warning(s) encountered\n")
    sys.exit(1)

