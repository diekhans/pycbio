#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from optparse import OptionParser
from pycbio.hgdata.ClusterGenes import ClusterGenes
from pycbio.sys.fileOps import prRow, prRowv, readFileLines

class CmdOpts(object):
    usage="""%prog [options] clusterFile outFile

    Select clusters based on the criteria specified by the options.
    By default, output a clusterGenes file with just the selected
    records.  If multiple select criteria are specified, they all
    must be true to select the loci.

    Somes options take track sets, which are comma seperated sets
    of track names.
"""

    def __init__(self):
        parser = OptionParser(usage=CmdOpts.usage)
        parser.add_option("--trackSet",
                          action="append", dest="trackSet", default=None,
                          help="""selects loci that have at least the specified set of tracks.
                                  Maybe specified multiple times.""")
        parser.add_option("--notTrackSet",
                          action="append", dest="notTrackSet", default=None,
                          help="""selects loci that don't have any of the specified set of tracks.
                                  Maybe specified multiple times.""")
        parser.add_option("--onlyTrackSet",
                          action="append", dest="onlyTrackSet", default=None,
                          help="""This selects loci that only the specified set of tracks.
                                  Maybe specified multiple times.""")
        parser.add_option("--notOnlyTrackSet",
                          action="append", dest="notOnlyTrackSet", default=None,
                          help="""This selects loci that don't have only the specified set of tracks.
                                  Maybe specified multiple times.""")
        parser.add_option("--geneIds", action="append", dest="geneIdFiles", default=None,
                          help="""select loci containing these gene ids""")
        parser.add_option("--geneIdBedOut", action="store_true", dest="geneIdBedOut", default=False,
                          help="""Output loci bed for each gene in --geneIds with name column being the gene id""")
        parser.add_option("--trackFilter", action="store", dest="trackFilterSet", default=None,
                          help="""Only output tracks in this set.  Loci that don't contain any of these tracks are dropped""")
        (opts, args) = parser.parse_args()
        if len(args) != 2:
            parser.error("wrong number of arguments")
        (self.clusterFile, self.outFile) = args
        self.__dict__.update(opts.__dict__)

class ClusterSelect(object):
    def __init__(self, opts):
        self.clusters = ClusterGenes(opts.clusterFile)

        self.trackSets = self._parseTrackSetList(opts.trackSet) if (opts.trackSet != None) else None
        self.notTrackSets = self._parseTrackSetList(opts.notTrackSet) if (opts.notTrackSet != None) else None
        self.onlyTrackSets = self._parseTrackSetList(opts.onlyTrackSet) if (opts.onlyTrackSet != None) else None
        self.notOnlyTrackSets = self._parseTrackSetList(opts.notOnlyTrackSet) if (opts.notOnlyTrackSet != None) else None
        self.geneIds = self._loadIdFiles(opts.geneIdFiles) if (opts.geneIdFiles != None) else None
        self.trackFilterSet = self._parseTrackSet(opts.trackFilterSet) if (opts.trackFilterSet != None) else None

    def _parseTrackSet(self, spec):
        selSet = set()
        for tr in spec.split(","):
            selSet.add(intern(tr))
        return selSet

    def _parseTrackSetList(self, specs):
        trackSetList = []
        for spec in specs:
            trackSetList.append(self._parseTrackSet(spec))
        return trackSetList

    def _loadIdFiles(self, idFiles):
        ids = set()
        for f in idFiles:
            for line in readFileLines(f):
                ids.add(line.strip())
        return ids

    def _selectedByTrackSets(self, cl):
        for ts in self.trackSets:
            if ts & cl.tableSet:
                return True
        return False

    def _rejectedByNotTrackSets(self, cl):
        for ts in self.notTrackSets:
            if ts & cl.tableSet:
                return True
        return False

    def _selectedByOnlyTrackSets(self, cl):
        for ts in self.onlyTrackSets:
            if ts == cl.tableSet:
                return True
        return False

    def _rejectedByNotOnlyTrackSets(self, cl):
        for ts in self.notOnlyTrackSets:
            if ts == cl.tableSet:
                return True
        return False

    def _selectedByGeneId(self, cl):
        for gene in cl:
            if gene.gene in self.geneIds:
                return True
        return False

    def _selected(self, cl):
        if (self.trackSets != None) and not self._selectedByTrackSets(cl):
            return False
        if (self.notTrackSets != None) and self._rejectedByTrackSets(cl):
            return False
        if (self.onlyTrackSets != None) and not self._selectedByOnlyTrackSets(cl):
            return False
        if (self.notOnlyTrackSets != None) and self._rejectedByNotOnlyTrackSets(cl):
            return False
        if (self.geneIds != None) and not self._selectedByGeneId(cl):
            return False
        if (self.trackFilterSet != None) and not (self.trackFilterSet & cl.tableSet):
            return False
        return True

    def outClusters(self, outFile):
        outFh = open(outFile, "w")
        outFh.write('#')
        prRow(outFh, self.clusters.columns)
        
        for cl in self.clusters:
            if self._selected(cl):
                cl.write(outFh, self.trackFilterSet)
        outFh.close()

    def _geneSelected(self, gene):
        return (((self.geneIds == None) or (gene.gene in self.geneIds))
                and ((self.trackFilterSet == None) or (gene.table in self.trackFilterSet)))

    def _writeGeneIdBed(self, outFh, cl):
        for gene in cl:
            if self._geneSelected(gene):
                prRowv(outFh, cl.chrom, cl.start, cl.end, gene.gene)

    def outGeneIdBed(self, outFile):
        outFh = open(outFile, "w")
        for cl in self.clusters:
            if self._selected(cl):
                self._writeGeneIdBed(outFh, cl)
        outFh.close()

def main():
    opts = CmdOpts()
    clSelect = ClusterSelect(opts)
    if opts.geneIdBedOut:
        clSelect.outGeneIdBed(opts.outFile)
    else:
        clSelect.outClusters(opts.outFile)

main()
