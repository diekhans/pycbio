#!/usr/bin/env python3
"Test program to use when testing cli support"


import sys
from os import path as osp
from functools import partial

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../../../../lib")))
from pycbio import NoStackError
from pycbio.sys import cli
from pycbio.sys.symEnum import SymEnum, auto

PRINT_STACK_TRUE = "True"
PRINT_STACK_FALSE = "False"
PRINT_STACK_NONE = "None"
PRINT_STACK_RETURNS = (PRINT_STACK_TRUE,
                       PRINT_STACK_FALSE,
                       PRINT_STACK_NONE)

class ErrorClass(SymEnum):
    no_error = auto()
    value_error = auto()
    file_not_found = auto()
    new_line_msg = auto()

class ErrorWrap(SymEnum):
    no_wrap = auto()
    no_stack = auto()
    with_stack = auto()
    no_stack_excepts = auto()

def parseArgs():
    usage = """Program to use in test command error handling"""
    parser = cli.ArgumentParserExtras(description=usage)
    parser.add_argument('--error-class', type=ErrorClass, choices=ErrorClass, default=ErrorClass.value_error,
                        help="class to exception (or no error)")
    parser.add_argument('--print-stack-filter', choices=PRINT_STACK_RETURNS,
                        help="add a printStackFilter that returns this value")
    parser.add_argument('error_wrap', type=ErrorWrap, choices=ErrorWrap,
                        help="how to wrap error cause")
    return parser.parse_opts_args()

class UserCausedException(Exception, NoStackError):
    pass

class AnnoyingException(Exception):
    pass

class BugException(Exception):
    pass

def three(opts):
    if opts.error_class is ErrorClass.value_error:
        raise ValueError("bad, bad value")
    if opts.error_class is ErrorClass.new_line_msg:
        raise ValueError("Space\nthe final\nfrontier")
    elif opts.error_class is ErrorClass.file_not_found:
        raise FileNotFoundError("/dev/fred/barney")

def two(opts, error_wrap):
    try:
        three(opts)
    except Exception as ex:
        if error_wrap is not ErrorWrap.no_wrap:
            raise RuntimeError("two caught") from ex
        else:
            raise

def one(opts, error_wrap):
    try:
        two(opts, error_wrap)
    except Exception as ex:
        if error_wrap is ErrorWrap.no_stack_excepts:
            raise AnnoyingException("very annoying") from ex
        elif error_wrap is ErrorWrap.no_stack:
            raise UserCausedException("bad user") from ex
        elif error_wrap is ErrorWrap.with_stack:
            raise BugException("bad software") from ex
        else:
            raise

def printStackFitler(val, exc_val):
    return val

def getPrintStackFilter(opts):
    if opts.print_stack_filter is None:
        return None
    if opts.print_stack_filter == PRINT_STACK_TRUE:
        return partial(printStackFitler, True)
    if opts.print_stack_filter == PRINT_STACK_FALSE:
        return partial(printStackFitler, False)
    if opts.print_stack_filter == PRINT_STACK_NONE:
        return partial(printStackFitler, None)

def getNoStackExcepts(opts, error_wrap):
    if error_wrap is error_wrap is ErrorWrap.no_stack_excepts:
        return (AnnoyingException,)
    else:
        return cli.ErrorHandler.DEFAULT_NO_STACK_EXCEPTS

def cliTestProg(opts, error_wrap):
    with cli.ErrorHandler(noStackExcepts=getNoStackExcepts(opts, error_wrap),
                          printStackFilter=getPrintStackFilter(opts)):
        one(opts, error_wrap)

def main():
    opts, args = parseArgs()
    cliTestProg(opts, args.error_wrap)


main()
