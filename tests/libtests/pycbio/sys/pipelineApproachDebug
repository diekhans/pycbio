#!/bin/env python
"""Program to investigate robust way of doing process substitution
"""


import os, errno
try:
    MAXFD = os.sysconf("SC_OPEN_MAX")
except:
    MAXFD = 256

####
# shared
###
class Proc(object):
    def __init__(self, keepOpenFds, sleepTime):
        "keepOpenFds can be a set, list, of single number"
        if isinstance(keepOpenFds, int):
            keepOpenFds = frozenset([keepOpenFds])
        self.pid = fork()
        self.isChild = (self.pid == 0)
        if self.isChild:
            os.sleep(sleepTime)
            self.__childInit(keepOpenFds)
            try:
                self._runChild()
                os._exit(0)
            except:
                os._exit(12)
                
    def __childInit(self, keepOpenFds):
        self.pid = os.getpid()

    def __closeFiles(self, keepOpenFd):
        "clone non-stdio files"
        for fd in xrange(3, MAXFD+1):
            try:
                if fd not in keepOpenFds:
                    os.close(fd)
            except OSError, ex:
                if ex.errno != EBADF:
                    raise
        
class ReaderProc(Proc):
    def __init__(self, fh, sleepTime):
        self.fh = fh
        Proc.__init__(self, fh, sleepTime)

    def _runChild(self):
        os.read(self.fh)
        
class WriterProc(Proc):
    data = "".join([str(i)  for i in xrange(200)])

    def __init__(self, fh, sleepTime):
        self.fh = fh
        Proc.__init__(self, fh, sleepTime)

    def _runChild(self):
        os.write(self.fh, self.data)


####
# unix domain sockets
####
class UnixDomainSocketExperiment(object):
    def __init__(self, readSleepTime, writeSleepTime):
        self.readSleepTime = readSleepTime
        self.writeSleepTime = writeSleepTime

# named pipe behavior
#  
